{"version": "2.1.0", "runs": [{"results": [{"level": "Low", "message": {"text": ["Function main has 27 logical lines, but only 0 assertion(s) -- minimum is 2 (for functions over 20 logical lines).", "Each function over 20 logical lines should have at least two assertions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["The typedef stdThreadLock hides pointer indirection.", "Pointer indirection may not be hidden by typedefs -- \"typedef int* IntPtr;\" is not allowed."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 5}}}]}, {"level": "Low", "message": {"text": ["The typedef stdThread hides pointer indirection.", "Pointer indirection may not be hidden by typedefs -- \"typedef int* IntPtr;\" is not allowed."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 4}}}]}, {"level": "Low", "message": {"text": ["The typedef stdThreadRoutine hides pointer indirection.", "Pointer indirection may not be hidden by typedefs -- \"typedef int* IntPtr;\" is not allowed."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["The variable globalArgv uses 2 levels of pointer indirection.", "No more than one level of pointer nesting/dereferencing should be used."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["The variable lock uses 2 levels of pointer indirection.", "No more than one level of pointer nesting/dereferencing should be used."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 133}}}]}, {"level": "Low", "message": {"text": ["The variable thread uses 2 levels of pointer indirection.", "No more than one level of pointer nesting/dereferencing should be used."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["Calls through function pointers are not permitted.", "Function pointers are not permitted -- they make it impossible for a tool to prove the absence of recursion."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["[This permanent loop](1) should not be exited.", "Permanent loops (like \"while(1) {..}\") are typically meant to be non-terminating and should not be terminated by other means."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 36}}}]}, {"level": "Low", "message": {"text": ["[This permanent loop](1) should not be exited.", "Permanent loops (like \"while(1) {..}\") are typically meant to be non-terminating and should not be terminated by other means."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always incremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 46}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["This loop does not have a fixed bound.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["This loop does not have a fixed bound.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 56}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 56}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 66}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 73}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 56}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 62}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 68}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 62}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 68}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 20}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 58}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 86}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 7}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 202}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 209}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 6}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 14}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 23}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 27}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 37}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 50}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 67}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 93}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 108}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 117}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 122}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 129}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 142}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 178}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 193}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 202}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 210}}}]}, {"level": "Low", "message": {"text": ["Dynamic memory allocation is only allowed during initialization.", "Dynamic memory allocation (using malloc() or calloc()) should be confined to the initialization routines of a program."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["Dynamic memory allocation is only allowed during initialization.", "Dynamic memory allocation (using malloc() or calloc()) should be confined to the initialization routines of a program."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["This line contains 2 statements; only one is allowed.", "Putting more than one statement on a single line hinders program understanding."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 100}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [swscanf](1) is not checked.", "The return value of non-void function [swscanf](2) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 138}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [sscanf](1) is not checked.", "The return value of non-void function [sscanf](2) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 116}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 97}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [puts](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 99}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 74}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 54}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 49}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 44}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 39}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 34}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 29}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [wprintf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 23}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [pthread_mutex_destroy](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 205}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [pthread_mutex_unlock](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [pthread_mutex_lock](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 184}}}]}, {"level": "Low", "message": {"text": ["This use of parameter argc has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 17}}}]}, {"level": "Low", "message": {"text": ["This use of parameter argv has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["This use of parameter bytes has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["This use of parameter bytes has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 117}}}]}, {"level": "Low", "message": {"text": ["This use of parameter bytes has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 97}}}]}, {"level": "Low", "message": {"text": ["This use of parameter structTwoIntsStruct has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["This use of parameter doubleNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["This use of parameter unsignedCharacter has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["This use of parameter unsignedNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 74}}}]}, {"level": "Low", "message": {"text": ["This use of parameter wideChar has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 67}}}]}, {"level": "Low", "message": {"text": ["This use of parameter charHex has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["This use of parameter sizeTNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 54}}}]}, {"level": "Low", "message": {"text": ["This use of parameter longLongIntNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 49}}}]}, {"level": "Low", "message": {"text": ["This use of parameter longNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 44}}}]}, {"level": "Low", "message": {"text": ["This use of parameter floatNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 39}}}]}, {"level": "Low", "message": {"text": ["This use of parameter shortNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 34}}}]}, {"level": "Low", "message": {"text": ["This use of parameter intNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 29}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 205}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 184}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 137}}}]}, {"level": "Low", "message": {"text": ["This use of parameter thread has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 112}}}]}, {"level": "Low", "message": {"text": ["This use of parameter thread has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["This use of parameter start has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 64}}}]}, {"level": "Low", "message": {"text": ["This use of parameter args has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 65}}}]}, {"level": "Low", "message": {"text": ["This use of parameter args has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763273.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["The pointer type void (*)(void *) is used to define the type stdThreadRoutine.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763274.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763275.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 45}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763277.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 14}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockRelease() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763293.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 188}}}]}, {"level": "Low", "message": {"text": ["stdThreadCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763294.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763295.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["decodeHexWChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763296.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 127}}}]}, {"level": "Low", "message": {"text": ["printLongLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763297.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 47}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763298.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["printWLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763299.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763300.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 85}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763301.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763302.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763303.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["decodeHexChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763304.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 105}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763305.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763306.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763307.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["printBytesLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763308.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 92}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763309.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["File io.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763310.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printHexCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763311.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["printShortLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763312.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 32}}}]}, {"level": "Low", "message": {"text": ["printSizeTLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763313.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 52}}}]}, {"level": "Low", "message": {"text": ["The pointer type struct _stdThreadLock * is used to define the type stdThreadLock.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763314.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 5}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763315.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["File std_thread.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763316.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Call through function pointer thread->start.  - The presence of function pointers makes programs harder for both humans and tools to understand.  - Power of Ten Rule 9 and JPL Rule 29 require that the use of function pointers be restricted.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763317.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["globalReturnsFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763318.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 153}}}]}, {"level": "Low", "message": {"text": ["good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763319.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 41}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763320.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763332.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763333.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763334.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763335.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763336.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763337.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763338.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763339.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["internal_start() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763340.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763341.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["printDoubleLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763342.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 82}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763343.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 52}}}]}, {"level": "Low", "message": {"text": ["stdThreadJoin() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763344.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 91}}}]}, {"level": "Low", "message": {"text": ["globalReturnsTrue() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763345.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 148}}}]}, {"level": "Low", "message": {"text": ["globalReturnsTrueOrFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763346.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 158}}}]}, {"level": "Low", "message": {"text": ["The pointer type struct _stdThread * is used to define the type stdThread.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763347.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 4}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763348.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763349.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763350.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 75}}}]}, {"level": "Low", "message": {"text": ["printLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763351.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["printStructLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763352.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 87}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763353.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763354.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763367.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 76}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763368.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763369.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763370.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 88}}}]}, {"level": "Low", "message": {"text": ["stdThreadDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763371.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 106}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763372.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 133}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763373.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 151}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763374.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763375.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["printFloatLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763387.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 37}}}]}, {"level": "Low", "message": {"text": ["bad3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763388.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 192}}}]}, {"level": "Low", "message": {"text": ["bad2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763389.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 191}}}]}, {"level": "Low", "message": {"text": ["bad5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763390.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 194}}}]}, {"level": "Low", "message": {"text": ["bad4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763391.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 193}}}]}, {"level": "Low", "message": {"text": ["bad1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763392.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 190}}}]}, {"level": "Low", "message": {"text": ["The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763393.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 78}}}]}, {"level": "Low", "message": {"text": ["The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763394.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763395.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["printIntLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763396.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 27}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763397.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763398.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printHexUnsignedCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763399.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 77}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763402.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763403.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["printWcharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763404.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 62}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763405.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763411.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 200}}}]}, {"level": "Low", "message": {"text": ["printUnsignedLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763412.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 72}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763413.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763414.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763415.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["good5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763416.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 183}}}]}, {"level": "Low", "message": {"text": ["good4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763417.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 182}}}]}, {"level": "Low", "message": {"text": ["good3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763418.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 181}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockAcquire() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763419.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 161}}}]}, {"level": "Low", "message": {"text": ["good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763420.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 180}}}]}, {"level": "Low", "message": {"text": ["good9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763421.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 187}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763422.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 112}}}]}, {"level": "Low", "message": {"text": ["good8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763423.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 186}}}]}, {"level": "Low", "message": {"text": ["good7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763424.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 185}}}]}, {"level": "Low", "message": {"text": ["The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763425.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 78}}}]}, {"level": "Low", "message": {"text": ["good6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763426.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 184}}}]}, {"level": "Low", "message": {"text": ["good1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763433.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 179}}}]}, {"level": "Low", "message": {"text": ["File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763445.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["bad7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763446.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["bad6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763447.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 195}}}]}, {"level": "Low", "message": {"text": ["bad9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763448.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 198}}}]}, {"level": "Low", "message": {"text": ["bad8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763449.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 197}}}]}, {"level": "Low", "message": {"text": ["main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763450.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763451.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 46}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763453.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763454.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763455.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763459.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763460.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763461.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763462.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763463.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763464.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763466.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763467.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["globalArgv could be local static to main in main_linux.cpp.  - globalArgv is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763483.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["globalArgc could be local static to main in main_linux.cpp.  - globalArgc is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/763485.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 206}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always incremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 46}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["This loop does not have a fixed bound.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["This loop does not have a fixed bound.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The loop counter i is not always decremented in the loop body.", "All loops should have a fixed upper bound; the counter should also be incremented along all paths within the loop. This check excludes loops that are meant to be nonterminating (like schedulers)."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["[This permanent loop](1) should not be exited.", "Permanent loops (like \"while(1) {..}\") are typically meant to be non-terminating and should not be terminated by other means."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 36}}}]}, {"level": "Low", "message": {"text": ["[This permanent loop](1) should not be exited.", "Permanent loops (like \"while(1) {..}\") are typically meant to be non-terminating and should not be terminated by other means."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["Dynamic memory allocation is only allowed during initialization.", "Dynamic memory allocation (using malloc() or calloc()) should be confined to the initialization routines of a program."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["Dynamic memory allocation is only allowed during initialization.", "Dynamic memory allocation (using malloc() or calloc()) should be confined to the initialization routines of a program."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["This line contains 2 statements; only one is allowed.", "Putting more than one statement on a single line hinders program understanding."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 100}}}]}, {"level": "Low", "message": {"text": ["Function main has 27 logical lines, but only 0 assertion(s) -- minimum is 2 (for functions over 20 logical lines).", "Each function over 20 logical lines should have at least two assertions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["This use of parameter argc has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 17}}}]}, {"level": "Low", "message": {"text": ["This use of parameter argv has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["This use of parameter bytes has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["This use of parameter bytes has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 117}}}]}, {"level": "Low", "message": {"text": ["This use of parameter bytes has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 97}}}]}, {"level": "Low", "message": {"text": ["This use of parameter structTwoIntsStruct has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["This use of parameter doubleNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["This use of parameter unsignedCharacter has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["This use of parameter unsignedNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 74}}}]}, {"level": "Low", "message": {"text": ["This use of parameter charHex has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["This use of parameter sizeTNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 54}}}]}, {"level": "Low", "message": {"text": ["This use of parameter longLongIntNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 49}}}]}, {"level": "Low", "message": {"text": ["This use of parameter longNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 44}}}]}, {"level": "Low", "message": {"text": ["This use of parameter floatNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 39}}}]}, {"level": "Low", "message": {"text": ["This use of parameter shortNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 34}}}]}, {"level": "Low", "message": {"text": ["This use of parameter intNumber has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 29}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 205}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 184}}}]}, {"level": "Low", "message": {"text": ["This use of parameter lock has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 137}}}]}, {"level": "Low", "message": {"text": ["This use of parameter thread has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 112}}}]}, {"level": "Low", "message": {"text": ["This use of parameter thread has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["This use of parameter start has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 64}}}]}, {"level": "Low", "message": {"text": ["This use of parameter args has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 65}}}]}, {"level": "Low", "message": {"text": ["This use of parameter args has not been checked.", "Functions should check their arguments before their first use."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [swscanf](1) is not checked.", "The return value of non-void function [swscanf](2) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 138}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [sscanf](1) is not checked.", "The return value of non-void function [sscanf](2) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 116}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 97}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [puts](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 99}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 74}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 54}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 49}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 44}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 39}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 34}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 29}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [wprintf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 23}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [printf](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [pthread_mutex_destroy](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 205}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [pthread_mutex_unlock](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["The return value of non-void function [pthread_mutex_lock](1) is not checked.", "The return value of each non-void function call should be checked for error conditions."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 184}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 56}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 56}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 66}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 73}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 56}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 69}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 62}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 68}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 62}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 68}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 20}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 58}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/src/main_linux.cpp"}, "region": {"startLine": 86}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 7}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 202}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 209}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 6}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 14}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 23}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 27}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 37}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 50}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 67}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 93}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 108}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 117}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 122}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 129}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 142}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 178}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 193}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 202}}}]}, {"level": "Low", "message": {"text": ["Use of conditional compilation must be kept to a minimum.", "The use of conditional compilation directives must be kept to a minimum -- e.g. for header guards only."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 210}}}]}, {"level": "Low", "message": {"text": ["Calls through function pointers are not permitted.", "Function pointers are not permitted -- they make it impossible for a tool to prove the absence of recursion."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["The typedef stdThreadLock hides pointer indirection.", "Pointer indirection may not be hidden by typedefs -- \"typedef int* IntPtr;\" is not allowed."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 5}}}]}, {"level": "Low", "message": {"text": ["The typedef stdThread hides pointer indirection.", "Pointer indirection may not be hidden by typedefs -- \"typedef int* IntPtr;\" is not allowed."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 4}}}]}, {"level": "Low", "message": {"text": ["The typedef stdThreadRoutine hides pointer indirection.", "Pointer indirection may not be hidden by typedefs -- \"typedef int* IntPtr;\" is not allowed."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["The variable globalArgv uses 2 levels of pointer indirection.", "No more than one level of pointer nesting/dereferencing should be used."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/io.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["The variable lock uses 2 levels of pointer indirection.", "No more than one level of pointer nesting/dereferencing should be used."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 133}}}]}, {"level": "Low", "message": {"text": ["The variable thread uses 2 levels of pointer indirection.", "No more than one level of pointer nesting/dereferencing should be used."]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/test/integration_tests/c_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 48}}}]}], "tool": {"driver": {"name": "codeql", "rules": ["cpp/power-of-10/assertion-density", "cpp/power-of-10/hidden-pointer-indirection", "cpp/power-of-10/pointer-nesting", "cpp/power-of-10/function-pointer", "cpp/power-of-10/exit-permanent-loop", "cpp/power-of-10/bounded-loop-iterations", "cpp/power-of-10/avoid-conditional-compilation", "cpp/power-of-10/dynamic-alloc-after-init", "cpp/power-of-10/one-stmt-per-line", "cpp/power-of-10/check-return-values", "cpp/power-of-10/check-arguments", "Not Enough Assertions", "Pointer Type Inside Typedef", "Conditional Compilation", "Macro Does Not Start With { or (", "Function-Like Macro", "Use of <stdlib.h> Allocator/Deallocator", "Warnings Not Treated As Errors", "Function Pointer", "Macro Does Not End With } or )", "Potential Unbounded Loop", "Scope Could Be Local Static"]}}}]}