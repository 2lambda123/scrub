codesonar001 <Low> :CWE835_Infinite_Loop__while_true_01.c:10: Not Enough Assertions
    CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755244.html

codesonar007 <Low> :CWE835_Infinite_Loop__do_true_01.c:43: Not Enough Assertions
    CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755266.html

codesonar013 <Low> :CWE835_Infinite_Loop__do_01.c:43: Not Enough Assertions
    CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755272.html

codesonar015 <Low> :CWE835_Infinite_Loop__while_01.c:42: Not Enough Assertions
    CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755274.html

codesonar017 <Low> :CWE835_Infinite_Loop__while_true_01.c:1: Warnings Not Treated As Errors
    File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755276.html

codesonar027 <Low> :CWE835_Infinite_Loop__for_01.c:10: Not Enough Assertions
    CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755286.html

codesonar031 <Low> :CWE835_Infinite_Loop__for_01.c:41: Not Enough Assertions
    good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755290.html

codesonar032 <Low> :CWE835_Infinite_Loop__while_01.c:8: Conditional Compilation
    This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755291.html

codesonar035 <Low> :CWE835_Infinite_Loop__do_true_01.c:10: Not Enough Assertions
    CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755305.html

codesonar037 <Low> :CWE835_Infinite_Loop__do_true_01.c:1: Warnings Not Treated As Errors
    File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755307.html

codesonar044 <Low> :CWE835_Infinite_Loop__for_01.c:52: Not Enough Assertions
    CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755314.html

codesonar049 <Low> :CWE835_Infinite_Loop__do_01.c:1: Warnings Not Treated As Errors
    File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755319.html

codesonar054 <Low> :CWE835_Infinite_Loop__for_empty_01.c:1: Warnings Not Treated As Errors
    File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755324.html

codesonar058 <Low> :CWE835_Infinite_Loop__while_01.c:10: Not Enough Assertions
    CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755340.html

codesonar063 <Low> :CWE835_Infinite_Loop__do_01.c:10: Not Enough Assertions
    CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755345.html

codesonar064 <Low> :CWE835_Infinite_Loop__while_01.c:24: Conditional Compilation
    This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755346.html

codesonar077 <Low> :CWE835_Infinite_Loop__for_empty_01.c:43: Not Enough Assertions
    CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755370.html

codesonar080 <Low> :CWE835_Infinite_Loop__for_01.c:1: Warnings Not Treated As Errors
    File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755373.html

codesonar083 <Low> :CWE835_Infinite_Loop__while_01.c:1: Warnings Not Treated As Errors
    File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755377.html

codesonar086 <Low> :CWE835_Infinite_Loop__while_01.c:55: Conditional Compilation
    This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755380.html

codesonar089 <Low> :CWE835_Infinite_Loop__for_empty_01.c:10: Not Enough Assertions
    CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755388.html

codesonar091 <Low> :CWE835_Infinite_Loop__while_true_01.c:42: Not Enough Assertions
    CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755390.html

codesonar104 <Low> :main_linux.cpp:1: Warnings Not Treated As Errors
    File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:
    /usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport
    See the parse details log for further information about this compilation.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755420.html

codesonar105 <Low> :main_linux.cpp:11: Not Enough Assertions
    main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755421.html

codesonar106 <Low> :CWE835_Infinite_Loop__for_01.c:46: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755422.html

codesonar107 <Low> :CWE835_Infinite_Loop__for_01.c:15: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755424.html

codesonar108 <Low> :CWE835_Infinite_Loop__while_01.c:15: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755425.html

codesonar109 <Low> :CWE835_Infinite_Loop__do_01.c:15: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755426.html

codesonar110 <Low> :CWE835_Infinite_Loop__while_true_01.c:15: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755430.html

codesonar111 <Low> :CWE835_Infinite_Loop__do_true_01.c:15: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755431.html

codesonar112 <Low> :CWE835_Infinite_Loop__for_empty_01.c:15: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755432.html

codesonar113 <Low> :CWE835_Infinite_Loop__while_true_01.c:30: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755433.html

codesonar114 <Low> :CWE835_Infinite_Loop__for_empty_01.c:31: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755434.html

codesonar115 <Low> :CWE835_Infinite_Loop__do_true_01.c:31: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755435.html

codesonar116 <Low> :CWE835_Infinite_Loop__while_01.c:30: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755437.html

codesonar117 <Low> :CWE835_Infinite_Loop__for_01.c:30: Potential Unbounded Loop
    CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.
    Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755438.html

