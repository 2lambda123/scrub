{"version": "2.1.0", "runs": [{"results": [{"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755244.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["The pointer type void (*)(void *) is used to define the type stdThreadRoutine.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755245.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755246.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 45}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755248.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 14}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockRelease() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755264.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 188}}}]}, {"level": "Low", "message": {"text": ["stdThreadCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755265.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755266.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["decodeHexWChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755267.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 127}}}]}, {"level": "Low", "message": {"text": ["printLongLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755268.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 47}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755269.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["printWLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755270.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755271.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 85}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755272.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755273.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755274.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["decodeHexChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755275.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 105}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755276.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755277.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755278.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["printBytesLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755279.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 92}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755280.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["File io.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755281.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printHexCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755282.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["printShortLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755283.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 32}}}]}, {"level": "Low", "message": {"text": ["printSizeTLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755284.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 52}}}]}, {"level": "Low", "message": {"text": ["The pointer type struct _stdThreadLock * is used to define the type stdThreadLock.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755285.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 5}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755286.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["File std_thread.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755287.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Call through function pointer thread->start.  - The presence of function pointers makes programs harder for both humans and tools to understand.  - Power of Ten Rule 9 and JPL Rule 29 require that the use of function pointers be restricted.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755288.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["globalReturnsFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755289.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 153}}}]}, {"level": "Low", "message": {"text": ["good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755290.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 41}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755291.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755303.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755304.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755305.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755306.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755307.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755308.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755309.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755310.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["internal_start() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755311.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755312.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["printDoubleLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755313.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 82}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755314.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 52}}}]}, {"level": "Low", "message": {"text": ["stdThreadJoin() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755315.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 91}}}]}, {"level": "Low", "message": {"text": ["globalReturnsTrue() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755316.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 148}}}]}, {"level": "Low", "message": {"text": ["globalReturnsTrueOrFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755317.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 158}}}]}, {"level": "Low", "message": {"text": ["The pointer type struct _stdThread * is used to define the type stdThread.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755318.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 4}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755319.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755320.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755321.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 75}}}]}, {"level": "Low", "message": {"text": ["printLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755322.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["printStructLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755323.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 87}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755324.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755325.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755338.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 76}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755339.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755340.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755341.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 88}}}]}, {"level": "Low", "message": {"text": ["stdThreadDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755342.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 106}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755343.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 133}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755344.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 151}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755345.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755346.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["printFloatLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755358.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 37}}}]}, {"level": "Low", "message": {"text": ["bad7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755359.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["bad6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755360.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 195}}}]}, {"level": "Low", "message": {"text": ["bad9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755361.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 198}}}]}, {"level": "Low", "message": {"text": ["bad8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755362.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 197}}}]}, {"level": "Low", "message": {"text": ["bad3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755363.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 192}}}]}, {"level": "Low", "message": {"text": ["bad2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755364.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 191}}}]}, {"level": "Low", "message": {"text": ["bad5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755365.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 194}}}]}, {"level": "Low", "message": {"text": ["bad4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755366.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 193}}}]}, {"level": "Low", "message": {"text": ["bad1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755367.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 190}}}]}, {"level": "Low", "message": {"text": ["The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755368.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 78}}}]}, {"level": "Low", "message": {"text": ["The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755369.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755370.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["printIntLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755371.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 27}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755372.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755373.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printHexUnsignedCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755374.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 77}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755377.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755378.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["printWcharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755379.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 62}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755380.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755386.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 200}}}]}, {"level": "Low", "message": {"text": ["printUnsignedLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755387.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 72}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755388.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755389.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755390.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["good5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755391.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 183}}}]}, {"level": "Low", "message": {"text": ["good4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755392.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 182}}}]}, {"level": "Low", "message": {"text": ["good3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755393.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 181}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockAcquire() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755394.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 161}}}]}, {"level": "Low", "message": {"text": ["good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755395.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 180}}}]}, {"level": "Low", "message": {"text": ["good9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755396.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 187}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755397.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 112}}}]}, {"level": "Low", "message": {"text": ["good8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755398.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 186}}}]}, {"level": "Low", "message": {"text": ["good7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755399.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 185}}}]}, {"level": "Low", "message": {"text": ["The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755400.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 78}}}]}, {"level": "Low", "message": {"text": ["good6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755401.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 184}}}]}, {"level": "Low", "message": {"text": ["good1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755408.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 179}}}]}, {"level": "Low", "message": {"text": ["File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755420.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/main_linux.cpp"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755421.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/main_linux.cpp"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755422.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 46}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755424.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755425.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755426.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755430.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755431.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755432.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755433.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755434.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755435.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755437.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755438.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["globalArgv could be local static to main in main_linux.cpp.  - globalArgv is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755454.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["globalArgc could be local static to main in main_linux.cpp.  - globalArgc is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755456.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/baseline_testcase/testcasesupport/io.c"}, "region": {"startLine": 206}}}]}], "tool": {"driver": {"name": "codesonar", "rules": ["Not Enough Assertions", "Pointer Type Inside Typedef", "Conditional Compilation", "Macro Does Not Start With { or (", "Function-Like Macro", "Use of <stdlib.h> Allocator/Deallocator", "Warnings Not Treated As Errors", "Function Pointer", "Macro Does Not End With } or )", "Potential Unbounded Loop", "Scope Could Be Local Static"]}}}]}