{"version": "2.1.0", "runs": [{"results": [{"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755461.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["The pointer type void (*)(void *) is used to define the type stdThreadRoutine.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755462.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755463.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 45}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755465.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 14}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockRelease() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755481.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 188}}}]}, {"level": "Low", "message": {"text": ["stdThreadCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755482.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755483.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["decodeHexWChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755484.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 138}}}]}, {"level": "Low", "message": {"text": ["printLongLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755485.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 58}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755486.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["printWLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755487.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755488.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 85}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755489.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755490.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 139}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755491.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["decodeHexChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755492.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 116}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755493.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755494.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755495.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["printBytesLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755496.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 103}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755497.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 89}}}]}, {"level": "Low", "message": {"text": ["File io.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755498.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printHexCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755499.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 68}}}]}, {"level": "Low", "message": {"text": ["printShortLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755500.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["printSizeTLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755501.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 63}}}]}, {"level": "Low", "message": {"text": ["The pointer type struct _stdThreadLock * is used to define the type stdThreadLock.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755502.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 5}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755503.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["File std_thread.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755504.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Call through function pointer thread->start.  - The presence of function pointers makes programs harder for both humans and tools to understand.  - Power of Ten Rule 9 and JPL Rule 29 require that the use of function pointers be restricted.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755505.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["globalReturnsFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755506.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 164}}}]}, {"level": "Low", "message": {"text": ["good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755507.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 41}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755508.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 8}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755520.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 84}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755521.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755522.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755523.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 18}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755524.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755525.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755526.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755527.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 35}}}]}, {"level": "Low", "message": {"text": ["internal_start() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755528.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755529.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["printDoubleLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755530.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 93}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755531.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 52}}}]}, {"level": "Low", "message": {"text": ["stdThreadJoin() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755532.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 91}}}]}, {"level": "Low", "message": {"text": ["globalReturnsTrue() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755533.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 159}}}]}, {"level": "Low", "message": {"text": ["globalReturnsTrueOrFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755534.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 169}}}]}, {"level": "Low", "message": {"text": ["The pointer type struct _stdThread * is used to define the type stdThread.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755535.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.h"}, "region": {"startLine": 4}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755536.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755537.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 59}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755538.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 75}}}]}, {"level": "Low", "message": {"text": ["printLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755539.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 53}}}]}, {"level": "Low", "message": {"text": ["printStructLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755540.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 98}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755541.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755542.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 57}}}]}, {"level": "Low", "message": {"text": ["There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755555.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 76}}}]}, {"level": "Low", "message": {"text": ["The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755556.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 19}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755557.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755558.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 88}}}]}, {"level": "Low", "message": {"text": ["stdThreadDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755559.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 106}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755560.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 133}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755561.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 151}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755562.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755563.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 24}}}]}, {"level": "Low", "message": {"text": ["printFloatLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755575.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 48}}}]}, {"level": "Low", "message": {"text": ["bad7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755576.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["bad6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755577.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 206}}}]}, {"level": "Low", "message": {"text": ["bad9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755578.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 209}}}]}, {"level": "Low", "message": {"text": ["bad8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755579.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 208}}}]}, {"level": "Low", "message": {"text": ["bad3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755580.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 203}}}]}, {"level": "Low", "message": {"text": ["bad2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755581.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 202}}}]}, {"level": "Low", "message": {"text": ["bad5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755582.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 205}}}]}, {"level": "Low", "message": {"text": ["bad4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755583.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 204}}}]}, {"level": "Low", "message": {"text": ["bad1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755584.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 201}}}]}, {"level": "Low", "message": {"text": ["The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755585.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 78}}}]}, {"level": "Low", "message": {"text": ["The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755586.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 33}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755587.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 43}}}]}, {"level": "Low", "message": {"text": ["printIntLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755588.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 38}}}]}, {"level": "Low", "message": {"text": ["The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755589.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 25}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755590.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["printHexUnsignedCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755591.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 88}}}]}, {"level": "Low", "message": {"text": ["File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755594.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755595.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 79}}}]}, {"level": "Low", "message": {"text": ["printWcharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755596.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 73}}}]}, {"level": "Low", "message": {"text": ["This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755597.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 55}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755603.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 200}}}]}, {"level": "Low", "message": {"text": ["printUnsignedLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755604.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 83}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755605.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 10}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755606.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 207}}}]}, {"level": "Low", "message": {"text": ["CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755607.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 42}}}]}, {"level": "Low", "message": {"text": ["good5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755608.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 194}}}]}, {"level": "Low", "message": {"text": ["good4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755609.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 193}}}]}, {"level": "Low", "message": {"text": ["good3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755610.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 192}}}]}, {"level": "Low", "message": {"text": ["stdThreadLockAcquire() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755611.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 161}}}]}, {"level": "Low", "message": {"text": ["good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755612.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 191}}}]}, {"level": "Low", "message": {"text": ["good9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755613.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 198}}}]}, {"level": "Low", "message": {"text": ["Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755614.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_thread.c"}, "region": {"startLine": 112}}}]}, {"level": "Low", "message": {"text": ["good8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755615.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 197}}}]}, {"level": "Low", "message": {"text": ["good7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755616.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 196}}}]}, {"level": "Low", "message": {"text": ["The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755617.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/std_testcase.h"}, "region": {"startLine": 78}}}]}, {"level": "Low", "message": {"text": ["good6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755618.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 195}}}]}, {"level": "Low", "message": {"text": ["good1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755625.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 190}}}]}, {"level": "Low", "message": {"text": ["File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:", "/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport", "See the parse details log for further information about this compilation.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755637.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/main_linux.cpp"}, "region": {"startLine": 1}}}]}, {"level": "Low", "message": {"text": ["main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755638.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/main_linux.cpp"}, "region": {"startLine": 11}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755639.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 46}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755641.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755642.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755643.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755647.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755648.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755649.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 15}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755650.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_true_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755651.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_empty_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755652.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__do_true_01.c"}, "region": {"startLine": 31}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755654.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__while_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis.", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755655.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/src/CWE835_Infinite_Loop__for_01.c"}, "region": {"startLine": 30}}}]}, {"level": "Low", "message": {"text": ["globalArgv could be local static to main in main_linux.cpp.  - globalArgv is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755671.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 218}}}]}, {"level": "Low", "message": {"text": ["globalArgc could be local static to main in main_linux.cpp.  - globalArgc is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\".", "Codesonar viewer: https://fake-codesonar-hub.com/warninginstance/755673.html"]}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/opt/project/comparison_testcase/testcasesupport/io.c"}, "region": {"startLine": 217}}}]}], "tool": {"driver": {"name": "codesonar", "rules": ["Not Enough Assertions", "Pointer Type Inside Typedef", "Conditional Compilation", "Macro Does Not Start With { or (", "Function-Like Macro", "Use of <stdlib.h> Allocator/Deallocator", "Warnings Not Treated As Errors", "Function Pointer", "Macro Does Not End With } or )", "Potential Unbounded Loop", "Scope Could Be Local Static"]}}}]}