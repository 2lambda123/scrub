{
  "version": "2.1.0", 
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", 
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "CodeSonar", 
          "fullName": "CodeSonar 5.4p0.20200911-x86_64-pc-linux", 
          "version": "5.4p0", 
          "semanticVersion": "5.4.0"
        }
      }, 
      "invocations": [
        {
          "startTimeUtc": "2021-03-19T17:23:08.108438Z", 
          "endTimeUtc": "2021-03-19T17:23:55.340206Z", 
          "executionSuccessful": true, 
          "machine": "d719ec7b33c5", 
          "account": "root"
        }
      ], 
      "originalUriBaseIds": {
        "SRCROOT0": {
          "uri": "file:///opt/project/comparison_testcase/"
        }
      }, 
      "artifacts": [
        {
          "location": {
            "uri": "src/CWE835_Infinite_Loop__do_01.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "812c6e41d79da8f7"
          }
        }, 
        {
          "location": {
            "uri": "src/CWE835_Infinite_Loop__do_true_01.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "ad8cb0cee7230e53"
          }
        }, 
        {
          "location": {
            "uri": "src/CWE835_Infinite_Loop__for_01.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "814c75265b86d949"
          }
        }, 
        {
          "location": {
            "uri": "src/CWE835_Infinite_Loop__for_empty_01.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "1738a92406fa16e8"
          }
        }, 
        {
          "location": {
            "uri": "src/CWE835_Infinite_Loop__while_01.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "9e237fe1e344788c"
          }
        }, 
        {
          "location": {
            "uri": "src/CWE835_Infinite_Loop__while_true_01.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "426eb5ac6829f8c2"
          }
        }, 
        {
          "location": {
            "uri": "src/main_linux.cpp", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "e8652012fb1657d0"
          }
        }, 
        {
          "location": {
            "uri": "src/testcases.h", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "127752455ecb2d9f"
          }
        }, 
        {
          "location": {
            "uri": "testcasesupport/io.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "8bcd60686b948f4f"
          }
        }, 
        {
          "location": {
            "uri": "testcasesupport/std_testcase.h", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "a90b486b0a3af585"
          }
        }, 
        {
          "location": {
            "uri": "testcasesupport/std_testcase_io.h", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "9b3bef15043308f"
          }
        }, 
        {
          "location": {
            "uri": "testcasesupport/std_thread.c", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "b8d028eb2efbceeb"
          }
        }, 
        {
          "location": {
            "uri": "testcasesupport/std_thread.h", 
            "uriBaseId": "SRCROOT0"
          }, 
          "mimeType": "text/x-c", 
          "hashes": {
            "LOOKUP3-FILENAME+CONTENT": "8916593cb34c9d30"
          }
        }
      ], 
      "results": [
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 5
                }, 
                "region": {
                  "startLine": 10, 
                  "startColumn": 6, 
                  "endColumn": 47
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__while_true_01_bad"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "79550bb0309bbdb8", 
            "codesonarFingerprint": "33fad0a74d4217f8"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 5
                          }, 
                          "region": {
                            "startLine": 10, 
                            "startColumn": 6, 
                            "endColumn": 47
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__while_true_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__while_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755461.html"
        }, 
        {
          "ruleId": "Pointer Type Inside Typedef", 
          "level": "warning", 
          "message": {
            "text": "The pointer type void (*)(void *) is used to define the type stdThreadRoutine.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 12
                }, 
                "region": {
                  "startLine": 11, 
                  "startColumn": 1, 
                  "endColumn": 46
                }
              }, 
              "message": {
                "text": "The pointer type void (*)(void *) is used to define the type stdThreadRoutine.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "6a790a0b9876559d", 
            "codesonarFingerprint": "6a790a0b9876559d"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 12
                }, 
                "region": {
                  "startLine": 11, 
                  "startColumn": 1, 
                  "endColumn": 46
                }
              }, 
              "message": {
                "text": "The pointer type void (*)(void *) is used to define the type stdThreadRoutine.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755462.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 45, 
                  "startColumn": 1, 
                  "endColumn": 15
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "af41b893d3043289", 
            "codesonarFingerprint": "af41b893d3043289"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 24
                }
              }, 
              "message": {
                "text": "This conditional compilation construct is permitted by Power of Ten Rule 8 because it matches the pattern #ifndef macro_name #define macro_name ... #endif.  However, at most one conditional compilation construct is permitted in each source file.  All subsequent #if, #ifdef and #ifndef directives in this file will trigger Conditional Compilation warnings."
              }
            }, 
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 45, 
                  "startColumn": 1, 
                  "endColumn": 15
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755463.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 14, 
                  "startColumn": 1, 
                  "endColumn": 14
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ea8404560d7da4fd", 
            "codesonarFingerprint": "ea8404560d7da4fd"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 24
                }
              }, 
              "message": {
                "text": "This conditional compilation construct is permitted by Power of Ten Rule 8 because it matches the pattern #ifndef macro_name #define macro_name ... #endif.  However, at most one conditional compilation construct is permitted in each source file.  All subsequent #if, #ifdef and #ifndef directives in this file will trigger Conditional Compilation warnings."
              }
            }, 
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 14, 
                  "startColumn": 1, 
                  "endColumn": 14
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755465.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadLockRelease() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 188, 
                  "startColumn": 6, 
                  "endColumn": 46
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockRelease"
                }
              ], 
              "message": {
                "text": "stdThreadLockRelease() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "c0f6cbb7130322f4", 
            "codesonarFingerprint": "77683bafe19873f5"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 188, 
                            "startColumn": 6, 
                            "endColumn": 46
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockRelease"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadLockRelease() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755481.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 48, 
                  "startColumn": 5, 
                  "endColumn": 75
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadCreate"
                }
              ], 
              "message": {
                "text": "stdThreadCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7fc6899206254f04", 
            "codesonarFingerprint": "4621d61702555f31"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 48, 
                            "startColumn": 5, 
                            "endColumn": 75
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadCreate"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755482.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                }, 
                "region": {
                  "startLine": 43, 
                  "startColumn": 6, 
                  "endColumn": 45
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__do_true_01_good"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "8d1ce2f3e7027813", 
            "codesonarFingerprint": "524ead2db8d9b18a"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1
                          }, 
                          "region": {
                            "startLine": 43, 
                            "startColumn": 6, 
                            "endColumn": 45
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__do_true_01_good"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__do_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755483.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "decodeHexWChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 138, 
                  "startColumn": 9, 
                  "endColumn": 85
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexWChars"
                }
              ], 
              "message": {
                "text": "decodeHexWChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "83653ecc7affe079", 
            "codesonarFingerprint": "3095234c629f458c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 138, 
                            "startColumn": 9, 
                            "endColumn": 85
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "decodeHexWChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755484.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printLongLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 58, 
                  "startColumn": 6, 
                  "endColumn": 51
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printLongLongLine"
                }
              ], 
              "message": {
                "text": "printLongLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "1d0202ac850a30ef", 
            "codesonarFingerprint": "e96b02fa5de15917"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 58, 
                            "startColumn": 6, 
                            "endColumn": 51
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printLongLongLine"
                          }
                        ], 
                        "message": {
                          "text": "printLongLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755485.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 18, 
                  "startColumn": 1, 
                  "endColumn": 35
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7d399e290074ecfb", 
            "codesonarFingerprint": "7d399e290074ecfb"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 18, 
                  "startColumn": 1, 
                  "endColumn": 35
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755486.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printWLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 30, 
                  "startColumn": 6, 
                  "endColumn": 39
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printWLine"
                }
              ], 
              "message": {
                "text": "printWLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "1044b5e1c255e84c", 
            "codesonarFingerprint": "e8f63bff2e555640"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 30, 
                            "startColumn": 6, 
                            "endColumn": 39
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printWLine"
                          }
                        ], 
                        "message": {
                          "text": "printWLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755487.html"
        }, 
        {
          "ruleId": "Function-Like Macro", 
          "level": "warning", 
          "message": {
            "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 85, 
                  "startColumn": 1, 
                  "endColumn": 66
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "4d00e8e1c23a736e", 
            "codesonarFingerprint": "4d00e8e1c23a736e"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 85, 
                  "startColumn": 1, 
                  "endColumn": 66
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755488.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                }, 
                "region": {
                  "startLine": 43, 
                  "startColumn": 6, 
                  "endColumn": 40
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__do_01_good"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "9201448b654d44b3", 
            "codesonarFingerprint": "88ab967248edd986"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 0
                          }, 
                          "region": {
                            "startLine": 43, 
                            "startColumn": 6, 
                            "endColumn": 40
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__do_01_good"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__do_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755489.html"
        }, 
        {
          "ruleId": "Use of <stdlib.h> Allocator/Deallocator", 
          "level": "warning", 
          "message": {
            "text": "Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 139, 
                  "startColumn": 30, 
                  "endColumn": 54
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockCreate"
                }
              ], 
              "message": {
                "text": "Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7e34138962748991", 
            "codesonarFingerprint": "2be0816a8ec28f1c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 139, 
                            "startColumn": 30, 
                            "endColumn": 54
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockCreate"
                          }
                        ], 
                        "message": {
                          "text": "Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755490.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 42, 
                  "startColumn": 6, 
                  "endColumn": 43
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__while_01_good"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "bf9eb15a1caa8013", 
            "codesonarFingerprint": "8c833f621c571e49"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 4
                          }, 
                          "region": {
                            "startLine": 42, 
                            "startColumn": 6, 
                            "endColumn": 43
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__while_01_good"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__while_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755491.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "decodeHexChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 116, 
                  "startColumn": 8, 
                  "endColumn": 80
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexChars"
                }
              ], 
              "message": {
                "text": "decodeHexChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7843d2b0d36c0cae", 
            "codesonarFingerprint": "171dd66a0c8320da"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 116, 
                            "startColumn": 8, 
                            "endColumn": 80
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "decodeHexChars() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755492.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 5
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "454f2c33753e0bf8", 
            "codesonarFingerprint": "454f2c33753e0bf8"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 5
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__while_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755493.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 35, 
                  "startColumn": 1, 
                  "endColumn": 22
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "b6ac16224bf433ec", 
            "codesonarFingerprint": "b6ac16224bf433ec"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 35, 
                  "startColumn": 1, 
                  "endColumn": 22
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755494.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 25, 
                  "startColumn": 1, 
                  "endColumn": 23
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "434e56dd5cc90638", 
            "codesonarFingerprint": "434e56dd5cc90638"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 25, 
                  "startColumn": 1, 
                  "endColumn": 23
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755495.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printBytesLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 103, 
                  "startColumn": 6, 
                  "endColumn": 66
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printBytesLine"
                }
              ], 
              "message": {
                "text": "printBytesLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "6a21ebe212344c93", 
            "codesonarFingerprint": "12ec816bf1b21ae1"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 103, 
                            "startColumn": 6, 
                            "endColumn": 66
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printBytesLine"
                          }
                        ], 
                        "message": {
                          "text": "printBytesLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755496.html"
        }, 
        {
          "ruleId": "Function-Like Macro", 
          "level": "warning", 
          "message": {
            "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 89, 
                  "startColumn": 1, 
                  "endColumn": 70
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "722fddaec22dae14", 
            "codesonarFingerprint": "722fddaec22dae14"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 89, 
                  "startColumn": 1, 
                  "endColumn": 70
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755497.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File io.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 22
                }
              }, 
              "message": {
                "text": "File io.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "77c12e3a921a963b", 
            "codesonarFingerprint": "77c12e3a921a963b"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 22
                }
              }, 
              "message": {
                "text": "File io.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755498.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printHexCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 68, 
                  "startColumn": 6, 
                  "endColumn": 37
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printHexCharLine"
                }
              ], 
              "message": {
                "text": "printHexCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ca13d0cc26445a26", 
            "codesonarFingerprint": "3d1b1a3ec13d8933"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 68, 
                            "startColumn": 6, 
                            "endColumn": 37
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printHexCharLine"
                          }
                        ], 
                        "message": {
                          "text": "printHexCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755499.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printShortLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 43, 
                  "startColumn": 6, 
                  "endColumn": 40
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printShortLine"
                }
              ], 
              "message": {
                "text": "printShortLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "2bf3c3fe4d2a99fc", 
            "codesonarFingerprint": "3d2a70c0ce60ba4c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 43, 
                            "startColumn": 6, 
                            "endColumn": 40
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printShortLine"
                          }
                        ], 
                        "message": {
                          "text": "printShortLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755500.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printSizeTLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 63, 
                  "startColumn": 6, 
                  "endColumn": 41
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printSizeTLine"
                }
              ], 
              "message": {
                "text": "printSizeTLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ec328e7b0a769d5a", 
            "codesonarFingerprint": "dd87a043c4107c47"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 63, 
                            "startColumn": 6, 
                            "endColumn": 41
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printSizeTLine"
                          }
                        ], 
                        "message": {
                          "text": "printSizeTLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755501.html"
        }, 
        {
          "ruleId": "Pointer Type Inside Typedef", 
          "level": "warning", 
          "message": {
            "text": "The pointer type struct _stdThreadLock * is used to define the type stdThreadLock.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 12
                }, 
                "region": {
                  "startLine": 5, 
                  "startColumn": 1, 
                  "endColumn": 46
                }
              }, 
              "message": {
                "text": "The pointer type struct _stdThreadLock * is used to define the type stdThreadLock.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "8d8f34ddac5f3245", 
            "codesonarFingerprint": "8d8f34ddac5f3245"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 12
                }, 
                "region": {
                  "startLine": 5, 
                  "startColumn": 1, 
                  "endColumn": 46
                }
              }, 
              "message": {
                "text": "The pointer type struct _stdThreadLock * is used to define the type stdThreadLock.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755502.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 10, 
                  "startColumn": 6, 
                  "endColumn": 40
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__for_01_bad"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "2d70b193014caded", 
            "codesonarFingerprint": "bbd9fc25802eb77a"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 2
                          }, 
                          "region": {
                            "startLine": 10, 
                            "startColumn": 6, 
                            "endColumn": 40
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__for_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__for_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755503.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File std_thread.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 14
                }
              }, 
              "message": {
                "text": "File std_thread.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "3fae046cb549ffb6", 
            "codesonarFingerprint": "3fae046cb549ffb6"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 14
                }
              }, 
              "message": {
                "text": "File std_thread.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755504.html"
        }, 
        {
          "ruleId": "Function Pointer", 
          "level": "warning", 
          "message": {
            "text": "Call through function pointer thread->start.  - The presence of function pointers makes programs harder for both humans and tools to understand.  - Power of Ten Rule 9 and JPL Rule 29 require that the use of function pointers be restricted."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 35, 
                  "startColumn": 5, 
                  "endColumn": 32
                }
              }, 
              "logicalLocations": [
                {
                  "name": "internal_start"
                }
              ], 
              "message": {
                "text": "Call through function pointer thread->start.  - The presence of function pointers makes programs harder for both humans and tools to understand.  - Power of Ten Rule 9 and JPL Rule 29 require that the use of function pointers be restricted."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "65f100fcab1bd6e4", 
            "codesonarFingerprint": "c7dc48df21cb6cb9"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 35, 
                            "startColumn": 5, 
                            "endColumn": 32
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "internal_start"
                          }
                        ], 
                        "message": {
                          "text": "Call through function pointer thread->start.  - The presence of function pointers makes programs harder for both humans and tools to understand.  - Power of Ten Rule 9 and JPL Rule 29 require that the use of function pointers be restricted."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755505.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "globalReturnsFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 164, 
                  "startColumn": 5, 
                  "endColumn": 25
                }
              }, 
              "logicalLocations": [
                {
                  "name": "globalReturnsFalse"
                }
              ], 
              "message": {
                "text": "globalReturnsFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "db6ba62551388725", 
            "codesonarFingerprint": "5427023935507f03"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 164, 
                            "startColumn": 5, 
                            "endColumn": 25
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "globalReturnsFalse"
                          }
                        ], 
                        "message": {
                          "text": "globalReturnsFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755506.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 41, 
                  "startColumn": 13, 
                  "endColumn": 20
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good2"
                }
              ], 
              "message": {
                "text": "good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "838b6b57f604a8c1", 
            "codesonarFingerprint": "f0a4f470cf7a7e4c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 2
                          }, 
                          "region": {
                            "startLine": 41, 
                            "startColumn": 13, 
                            "endColumn": 20
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good2"
                          }
                        ], 
                        "message": {
                          "text": "good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755507.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 8, 
                  "startColumn": 1, 
                  "endColumn": 16
                }
              }, 
              "message": {
                "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "0cf759d363402534", 
            "codesonarFingerprint": "0cf759d363402534"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 8, 
                  "startColumn": 1, 
                  "endColumn": 16
                }
              }, 
              "message": {
                "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755508.html"
        }, 
        {
          "ruleId": "Function-Like Macro", 
          "level": "warning", 
          "message": {
            "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 84, 
                  "startColumn": 1, 
                  "endColumn": 77
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "656931991e7a6114", 
            "codesonarFingerprint": "656931991e7a6114"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 84, 
                  "startColumn": 1, 
                  "endColumn": 77
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755520.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 19, 
                  "startColumn": 1, 
                  "endColumn": 33
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "d0eb00e414d4168e", 
            "codesonarFingerprint": "d0eb00e414d4168e"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 19, 
                  "startColumn": 1, 
                  "endColumn": 33
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755521.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                }, 
                "region": {
                  "startLine": 10, 
                  "startColumn": 6, 
                  "endColumn": 44
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__do_true_01_bad"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "d6582c9e889acd40", 
            "codesonarFingerprint": "d4aedaab1d150d48"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1
                          }, 
                          "region": {
                            "startLine": 10, 
                            "startColumn": 6, 
                            "endColumn": 44
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__do_true_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__do_true_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755522.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 18, 
                  "startColumn": 1, 
                  "endColumn": 35
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ac223a2cf399465c", 
            "codesonarFingerprint": "ac223a2cf399465c"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 18, 
                  "startColumn": 1, 
                  "endColumn": 35
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_DEPRECATE is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755523.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "b84713963002f45a", 
            "codesonarFingerprint": "b84713963002f45a"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__do_true_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755524.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 11, 
                  "startColumn": 6, 
                  "endColumn": 35
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printLine"
                }
              ], 
              "message": {
                "text": "printLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "8d9c48cf537e38b8", 
            "codesonarFingerprint": "5e94086bd3b7b10e"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 11, 
                            "startColumn": 6, 
                            "endColumn": 35
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printLine"
                          }
                        ], 
                        "message": {
                          "text": "printLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755525.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 79, 
                  "startColumn": 1, 
                  "endColumn": 16
                }
              }, 
              "message": {
                "text": "The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "0d7a1711fbfcd0e8", 
            "codesonarFingerprint": "0d7a1711fbfcd0e8"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 79, 
                  "startColumn": 1, 
                  "endColumn": 16
                }
              }, 
              "message": {
                "text": "The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755526.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 35, 
                  "startColumn": 1, 
                  "endColumn": 22
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "810f46c6f42809e6", 
            "codesonarFingerprint": "810f46c6f42809e6"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 35, 
                  "startColumn": 1, 
                  "endColumn": 22
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755527.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "internal_start() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 30, 
                  "startColumn": 14, 
                  "endColumn": 40
                }
              }, 
              "logicalLocations": [
                {
                  "name": "internal_start"
                }
              ], 
              "message": {
                "text": "internal_start() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "6970f43ac3add0b2", 
            "codesonarFingerprint": "eeb7dd31533dae28"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 30, 
                            "startColumn": 14, 
                            "endColumn": 40
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "internal_start"
                          }
                        ], 
                        "message": {
                          "text": "internal_start() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755528.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 33, 
                  "startColumn": 1, 
                  "endColumn": 60
                }
              }, 
              "message": {
                "text": "The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ee4f6219ea042b28", 
            "codesonarFingerprint": "ee4f6219ea042b28"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 33, 
                  "startColumn": 1, 
                  "endColumn": 60
                }
              }, 
              "message": {
                "text": "The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755529.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printDoubleLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 93, 
                  "startColumn": 6, 
                  "endColumn": 42
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printDoubleLine"
                }
              ], 
              "message": {
                "text": "printDoubleLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "3ba2760dd5ad99e0", 
            "codesonarFingerprint": "e995bc9d7fc6b6a9"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 93, 
                            "startColumn": 6, 
                            "endColumn": 42
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printDoubleLine"
                          }
                        ], 
                        "message": {
                          "text": "printDoubleLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755530.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 52, 
                  "startColumn": 6, 
                  "endColumn": 41
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__for_01_good"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "cbf7dad28763d779", 
            "codesonarFingerprint": "defe8b02dce26228"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 2
                          }, 
                          "region": {
                            "startLine": 52, 
                            "startColumn": 6, 
                            "endColumn": 41
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__for_01_good"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__for_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755531.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadJoin() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 91, 
                  "startColumn": 5, 
                  "endColumn": 36
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadJoin"
                }
              ], 
              "message": {
                "text": "stdThreadJoin() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "f249346fc0b656ad", 
            "codesonarFingerprint": "891ac28b278fe65c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 91, 
                            "startColumn": 5, 
                            "endColumn": 36
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadJoin"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadJoin() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755532.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "globalReturnsTrue() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 159, 
                  "startColumn": 5, 
                  "endColumn": 24
                }
              }, 
              "logicalLocations": [
                {
                  "name": "globalReturnsTrue"
                }
              ], 
              "message": {
                "text": "globalReturnsTrue() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "3bf236fa6495f504", 
            "codesonarFingerprint": "9f1c80e4eea66ca3"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 159, 
                            "startColumn": 5, 
                            "endColumn": 24
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "globalReturnsTrue"
                          }
                        ], 
                        "message": {
                          "text": "globalReturnsTrue() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755533.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "globalReturnsTrueOrFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 169, 
                  "startColumn": 5, 
                  "endColumn": 31
                }
              }, 
              "logicalLocations": [
                {
                  "name": "globalReturnsTrueOrFalse"
                }
              ], 
              "message": {
                "text": "globalReturnsTrueOrFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "dc2c507c7c54f7f3", 
            "codesonarFingerprint": "b276373ec845be0f"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 169, 
                            "startColumn": 5, 
                            "endColumn": 31
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "globalReturnsTrueOrFalse"
                          }
                        ], 
                        "message": {
                          "text": "globalReturnsTrueOrFalse() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755534.html"
        }, 
        {
          "ruleId": "Pointer Type Inside Typedef", 
          "level": "warning", 
          "message": {
            "text": "The pointer type struct _stdThread * is used to define the type stdThread.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 12
                }, 
                "region": {
                  "startLine": 4, 
                  "startColumn": 1, 
                  "endColumn": 38
                }
              }, 
              "message": {
                "text": "The pointer type struct _stdThread * is used to define the type stdThread.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7cdd70e66df24254", 
            "codesonarFingerprint": "7cdd70e66df24254"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 12
                }, 
                "region": {
                  "startLine": 4, 
                  "startColumn": 1, 
                  "endColumn": 38
                }
              }, 
              "message": {
                "text": "The pointer type struct _stdThread * is used to define the type stdThread.  - Hiding pointer types inside typedef declarations can make it hard for human readers to follow the flow of data in a program."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755535.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "aaf587a16686c7bd", 
            "codesonarFingerprint": "aaf587a16686c7bd"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__do_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755536.html"
        }, 
        {
          "ruleId": "Use of <stdlib.h> Allocator/Deallocator", 
          "level": "warning", 
          "message": {
            "text": "Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 59, 
                  "startColumn": 28, 
                  "endColumn": 54
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadCreate"
                }
              ], 
              "message": {
                "text": "Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "1bbf8c835757e63a", 
            "codesonarFingerprint": "838cf89fb99cc0d3"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 59, 
                            "startColumn": 28, 
                            "endColumn": 54
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadCreate"
                          }
                        ], 
                        "message": {
                          "text": "Use of malloc() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755537.html"
        }, 
        {
          "ruleId": "Use of <stdlib.h> Allocator/Deallocator", 
          "level": "warning", 
          "message": {
            "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 75, 
                  "startColumn": 9, 
                  "endColumn": 24
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadCreate"
                }
              ], 
              "message": {
                "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "0577e5517a23a240", 
            "codesonarFingerprint": "b25e54006839b7d8"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 75, 
                            "startColumn": 9, 
                            "endColumn": 24
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadCreate"
                          }
                        ], 
                        "message": {
                          "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755538.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 53, 
                  "startColumn": 6, 
                  "endColumn": 37
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printLongLine"
                }
              ], 
              "message": {
                "text": "printLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "3ed63c4197240b37", 
            "codesonarFingerprint": "64812acd67acfbcd"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 53, 
                            "startColumn": 6, 
                            "endColumn": 37
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printLongLine"
                          }
                        ], 
                        "message": {
                          "text": "printLongLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755539.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printStructLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 98, 
                  "startColumn": 6, 
                  "endColumn": 65
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printStructLine"
                }
              ], 
              "message": {
                "text": "printStructLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "a5876b952d2ed0bd", 
            "codesonarFingerprint": "ff95ca83494794a2"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 98, 
                            "startColumn": 6, 
                            "endColumn": 65
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printStructLine"
                          }
                        ], 
                        "message": {
                          "text": "printStructLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755540.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 3
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "26d355b7a5b805c7", 
            "codesonarFingerprint": "26d355b7a5b805c7"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 3
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__for_empty_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755541.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 57, 
                  "startColumn": 1, 
                  "endColumn": 19
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "4595da9e015b45c7", 
            "codesonarFingerprint": "4595da9e015b45c7"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 24
                }
              }, 
              "message": {
                "text": "This conditional compilation construct is permitted by Power of Ten Rule 8 because it matches the pattern #ifndef macro_name #define macro_name ... #endif.  However, at most one conditional compilation construct is permitted in each source file.  All subsequent #if, #ifdef and #ifndef directives in this file will trigger Conditional Compilation warnings."
              }
            }, 
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 57, 
                  "startColumn": 1, 
                  "endColumn": 19
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifdef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755542.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 76, 
                  "startColumn": 1, 
                  "endColumn": 20
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "4db200fd3687143a", 
            "codesonarFingerprint": "4db200fd3687143a"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 24
                }
              }, 
              "message": {
                "text": "This conditional compilation construct is permitted by Power of Ten Rule 8 because it matches the pattern #ifndef macro_name #define macro_name ... #endif.  However, at most one conditional compilation construct is permitted in each source file.  All subsequent #if, #ifdef and #ifndef directives in this file will trigger Conditional Compilation warnings."
              }
            }, 
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 76, 
                  "startColumn": 1, 
                  "endColumn": 20
                }
              }, 
              "message": {
                "text": "There are multiple conditional compilation constructs in this file.  - Power of Ten Rule 8 and JPL Rule 20 forbid multiple conditional compliation constructs in the same file.  - There is an #ifndef directive here.  - There is already a conditional compilation construct at line 1.  - CodeSonar will issue a Conditional Compilation warning whenever a file contains conditional compilation constructs, unless there is exactly one such construct and it has a specific form.  Find out more."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755555.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 19, 
                  "startColumn": 1, 
                  "endColumn": 33
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ffa7827606d910f6", 
            "codesonarFingerprint": "ffa7827606d910f6"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 19, 
                  "startColumn": 1, 
                  "endColumn": 33
                }
              }, 
              "message": {
                "text": "The definition of _CRT_SECURE_NO_WARNING is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755556.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 10, 
                  "startColumn": 6, 
                  "endColumn": 42
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__while_01_bad"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "790e50569325ba05", 
            "codesonarFingerprint": "b409e1acbc2c48ec"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 4
                          }, 
                          "region": {
                            "startLine": 10, 
                            "startColumn": 6, 
                            "endColumn": 42
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__while_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__while_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755557.html"
        }, 
        {
          "ruleId": "Function-Like Macro", 
          "level": "warning", 
          "message": {
            "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 88, 
                  "startColumn": 1, 
                  "endColumn": 127
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7637fa5df6616e87", 
            "codesonarFingerprint": "7637fa5df6616e87"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 88, 
                  "startColumn": 1, 
                  "endColumn": 127
                }
              }, 
              "message": {
                "text": "Violation of MISRA C++:2008 16-0-4: Function-like macros shall not be defined."
              }
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755558.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 106, 
                  "startColumn": 5, 
                  "endColumn": 39
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadDestroy"
                }
              ], 
              "message": {
                "text": "stdThreadDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "19a4e24504f893f0", 
            "codesonarFingerprint": "8831f20c16a79cff"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 106, 
                            "startColumn": 5, 
                            "endColumn": 39
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadDestroy"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755559.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadLockCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 133, 
                  "startColumn": 5, 
                  "endColumn": 45
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockCreate"
                }
              ], 
              "message": {
                "text": "stdThreadLockCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "499befe85fe8436a", 
            "codesonarFingerprint": "caa60e467e71f993"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 133, 
                            "startColumn": 5, 
                            "endColumn": 45
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockCreate"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadLockCreate() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755560.html"
        }, 
        {
          "ruleId": "Use of <stdlib.h> Allocator/Deallocator", 
          "level": "warning", 
          "message": {
            "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 151, 
                  "startColumn": 9, 
                  "endColumn": 19
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockCreate"
                }
              ], 
              "message": {
                "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "db876a4cbf6b92c7", 
            "codesonarFingerprint": "6e41b3bf5e126910"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 151, 
                            "startColumn": 9, 
                            "endColumn": 19
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockCreate"
                          }
                        ], 
                        "message": {
                          "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755561.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                }, 
                "region": {
                  "startLine": 10, 
                  "startColumn": 6, 
                  "endColumn": 39
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__do_01_bad"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e3957bbf4f7acfcf", 
            "codesonarFingerprint": "b74954dd88f6d731"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 0
                          }, 
                          "region": {
                            "startLine": 10, 
                            "startColumn": 6, 
                            "endColumn": 39
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__do_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__do_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755562.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 24, 
                  "startColumn": 1, 
                  "endColumn": 17
                }
              }, 
              "message": {
                "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "89909750c29fe87d", 
            "codesonarFingerprint": "89909750c29fe87d"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 24, 
                  "startColumn": 1, 
                  "endColumn": 17
                }
              }, 
              "message": {
                "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifndef directives, except in the case where:  - an #ifndef !defined(ID)directive is immediately followed by #define ID and this is the only conditional compilation construct in the source file."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755563.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printFloatLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 48, 
                  "startColumn": 6, 
                  "endColumn": 40
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printFloatLine"
                }
              ], 
              "message": {
                "text": "printFloatLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "2965c3762dc158f3", 
            "codesonarFingerprint": "c09b1476cdc6f028"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 48, 
                            "startColumn": 6, 
                            "endColumn": 40
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printFloatLine"
                          }
                        ], 
                        "message": {
                          "text": "printFloatLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755575.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 207, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad7"
                }
              ], 
              "message": {
                "text": "bad7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "5b7162dba68a20ff", 
            "codesonarFingerprint": "6ef0c469e89de61f"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 207, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad7"
                          }
                        ], 
                        "message": {
                          "text": "bad7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755576.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 206, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad6"
                }
              ], 
              "message": {
                "text": "bad6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "616a60aabb585c1b", 
            "codesonarFingerprint": "cd676de95bfc647b"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 206, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad6"
                          }
                        ], 
                        "message": {
                          "text": "bad6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755577.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 209, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad9"
                }
              ], 
              "message": {
                "text": "bad9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ee433675895d3f9d", 
            "codesonarFingerprint": "d8ad8bc877be5600"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 209, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad9"
                          }
                        ], 
                        "message": {
                          "text": "bad9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755578.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 208, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad8"
                }
              ], 
              "message": {
                "text": "bad8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e9c1580a3a61c26b", 
            "codesonarFingerprint": "7437614d8941c12a"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 208, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad8"
                          }
                        ], 
                        "message": {
                          "text": "bad8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755579.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 203, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad3"
                }
              ], 
              "message": {
                "text": "bad3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "8d596aec3ca1aae3", 
            "codesonarFingerprint": "d93147685d86b924"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 203, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad3"
                          }
                        ], 
                        "message": {
                          "text": "bad3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755580.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 202, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad2"
                }
              ], 
              "message": {
                "text": "bad2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e3a96219ffd04338", 
            "codesonarFingerprint": "9d5137980e17b050"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 202, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad2"
                          }
                        ], 
                        "message": {
                          "text": "bad2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755581.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 205, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad5"
                }
              ], 
              "message": {
                "text": "bad5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "30f579bc812c0da9", 
            "codesonarFingerprint": "15b1c49a0d5b35db"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 205, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad5"
                          }
                        ], 
                        "message": {
                          "text": "bad5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755582.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 204, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad4"
                }
              ], 
              "message": {
                "text": "bad4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "0aa9327da9b6a966", 
            "codesonarFingerprint": "6e06bffa3cd9c882"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 204, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad4"
                          }
                        ], 
                        "message": {
                          "text": "bad4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755583.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "bad1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 201, 
                  "startColumn": 6, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "bad1"
                }
              ], 
              "message": {
                "text": "bad1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "85b2094fe40d1920", 
            "codesonarFingerprint": "386e68eb28a688fc"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 201, 
                            "startColumn": 6, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "bad1"
                          }
                        ], 
                        "message": {
                          "text": "bad1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755584.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 78, 
                  "startColumn": 1, 
                  "endColumn": 15
                }
              }, 
              "message": {
                "text": "The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "cf93c82f740ff87d", 
            "codesonarFingerprint": "cf93c82f740ff87d"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 78, 
                  "startColumn": 1, 
                  "endColumn": 15
                }
              }, 
              "message": {
                "text": "The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755585.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 33, 
                  "startColumn": 1, 
                  "endColumn": 60
                }
              }, 
              "message": {
                "text": "The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "cdd09ac761372d3f", 
            "codesonarFingerprint": "cdd09ac761372d3f"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 33, 
                  "startColumn": 1, 
                  "endColumn": 60
                }
              }, 
              "message": {
                "text": "The definition of __STDC_LIMIT_MACROS is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755586.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 3
                }, 
                "region": {
                  "startLine": 43, 
                  "startColumn": 6, 
                  "endColumn": 47
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__for_empty_01_good"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "c33e812a14035882", 
            "codesonarFingerprint": "25bcc181596a2f16"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 3
                          }, 
                          "region": {
                            "startLine": 43, 
                            "startColumn": 6, 
                            "endColumn": 47
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__for_empty_01_good"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__for_empty_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755587.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printIntLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 38, 
                  "startColumn": 6, 
                  "endColumn": 34
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printIntLine"
                }
              ], 
              "message": {
                "text": "printIntLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "a68843c19a0485f3", 
            "codesonarFingerprint": "35f21bbb25ee26d5"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 38, 
                            "startColumn": 6, 
                            "endColumn": 34
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printIntLine"
                          }
                        ], 
                        "message": {
                          "text": "printIntLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755588.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 25, 
                  "startColumn": 1, 
                  "endColumn": 23
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "9b3c217732de06b4", 
            "codesonarFingerprint": "9b3c217732de06b4"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 25, 
                  "startColumn": 1, 
                  "endColumn": 23
                }
              }, 
              "message": {
                "text": "The definition of ALLOCA is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755589.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "29b52002360c7386", 
            "codesonarFingerprint": "29b52002360c7386"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__for_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755590.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printHexUnsignedCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 88, 
                  "startColumn": 6, 
                  "endColumn": 63
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printHexUnsignedCharLine"
                }
              ], 
              "message": {
                "text": "printHexUnsignedCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "ad1ab5c781dede35", 
            "codesonarFingerprint": "2600ba2b5ff400a9"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 88, 
                            "startColumn": 6, 
                            "endColumn": 63
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printHexUnsignedCharLine"
                          }
                        ], 
                        "message": {
                          "text": "printHexUnsignedCharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755591.html"
        }, 
        {
          "ruleId": "Negative Character Value", 
          "level": "error", 
          "message": {
            "text": "isxdigit() is invoked here with an argument of signed type char, but only has defined behavior for int arguments that are either representable as unsigned char or equal to the value of macro EOF(-1).  - Casting the argument to unsigned char will avoid the undefined behavior.  In a number of libc implementations, isxdigit() is implemented using lookup tables (arrays): passing in a negative value can result in a read underrun."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 124, 
                  "startColumn": 46, 
                  "endColumn": 65
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexChars"
                }
              ], 
              "message": {
                "text": "isxdigit() is invoked here with an argument of signed type char, but only has defined behavior for int arguments that are either representable as unsigned char or equal to the value of macro EOF(-1).  - Casting the argument to unsigned char will avoid the undefined behavior.  In a number of libc implementations, isxdigit() is implemented using lookup tables (arrays): passing in a negative value can result in a read underrun."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "bd86d4a550c7650c", 
            "codesonarFingerprint": "bf201233553bfd82"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 124, 
                            "startColumn": 46, 
                            "endColumn": 65
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "isxdigit() is invoked here with an argument of signed type char, but only has defined behavior for int arguments that are either representable as unsigned char or equal to the value of macro EOF(-1).  - Casting the argument to unsigned char will avoid the undefined behavior.  In a number of libc implementations, isxdigit() is implemented using lookup tables (arrays): passing in a negative value can result in a read underrun."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 67.9178695678711, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755592.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "616eacb749b058d5", 
            "codesonarFingerprint": "616eacb749b058d5"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 3
                }
              }, 
              "message": {
                "text": "File CWE835_Infinite_Loop__while_01.c was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755594.html"
        }, 
        {
          "ruleId": "Macro Does Not Start With { or (", 
          "level": "warning", 
          "message": {
            "text": "The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 79, 
                  "startColumn": 1, 
                  "endColumn": 16
                }
              }, 
              "message": {
                "text": "The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "a1766bf5a75eef50", 
            "codesonarFingerprint": "a1766bf5a75eef50"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 79, 
                  "startColumn": 1, 
                  "endColumn": 16
                }
              }, 
              "message": {
                "text": "The definition of false is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755595.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printWcharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 73, 
                  "startColumn": 6, 
                  "endColumn": 38
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printWcharLine"
                }
              ], 
              "message": {
                "text": "printWcharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e51e1057b403f9d6", 
            "codesonarFingerprint": "94ac49a28da07152"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 73, 
                            "startColumn": 6, 
                            "endColumn": 38
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printWcharLine"
                          }
                        ], 
                        "message": {
                          "text": "printWcharLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755596.html"
        }, 
        {
          "ruleId": "Conditional Compilation", 
          "level": "warning", 
          "message": {
            "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 55, 
                  "startColumn": 1, 
                  "endColumn": 19
                }
              }, 
              "message": {
                "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "9ee9bbeef4f45a15", 
            "codesonarFingerprint": "9ee9bbeef4f45a15"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 55, 
                  "startColumn": 1, 
                  "endColumn": 19
                }
              }, 
              "message": {
                "text": "This form of conditional compilation is forbidden by Power of Ten Rule 8.When the Conditional Compilation warning class is enabled, warnings will be issued for all #ifdef directives  Find out more."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755597.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadLockDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 200, 
                  "startColumn": 6, 
                  "endColumn": 46
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockDestroy"
                }
              ], 
              "message": {
                "text": "stdThreadLockDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "d376aef407f45ffa", 
            "codesonarFingerprint": "fe8eb33634d5c56d"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 200, 
                            "startColumn": 6, 
                            "endColumn": 46
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockDestroy"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadLockDestroy() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755603.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "printUnsignedLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 83, 
                  "startColumn": 6, 
                  "endColumn": 48
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printUnsignedLine"
                }
              ], 
              "message": {
                "text": "printUnsignedLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "21f0a0780fec616f", 
            "codesonarFingerprint": "e903be7930f5fedc"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 83, 
                            "startColumn": 6, 
                            "endColumn": 48
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printUnsignedLine"
                          }
                        ], 
                        "message": {
                          "text": "printUnsignedLine() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755604.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 3
                }, 
                "region": {
                  "startLine": 10, 
                  "startColumn": 6, 
                  "endColumn": 46
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__for_empty_01_bad"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "15b7a68e3c63b454", 
            "codesonarFingerprint": "9d0a2a6e425c16a8"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 3
                          }, 
                          "region": {
                            "startLine": 10, 
                            "startColumn": 6, 
                            "endColumn": 46
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__for_empty_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__for_empty_01_bad() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755605.html"
        }, 
        {
          "ruleId": "Use of <stdlib.h> Allocator/Deallocator", 
          "level": "warning", 
          "message": {
            "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 207, 
                  "startColumn": 5, 
                  "endColumn": 15
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockDestroy"
                }
              ], 
              "message": {
                "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e1930fb9f8ba0229", 
            "codesonarFingerprint": "b37bea04937e45c6"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 207, 
                            "startColumn": 5, 
                            "endColumn": 15
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockDestroy"
                          }
                        ], 
                        "message": {
                          "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755606.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 5
                }, 
                "region": {
                  "startLine": 42, 
                  "startColumn": 6, 
                  "endColumn": 48
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__while_true_01_good"
                }
              ], 
              "message": {
                "text": "CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "9270b45ca1794c35", 
            "codesonarFingerprint": "365708029feaa80d"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 5
                          }, 
                          "region": {
                            "startLine": 42, 
                            "startColumn": 6, 
                            "endColumn": 48
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__while_true_01_good"
                          }
                        ], 
                        "message": {
                          "text": "CWE835_Infinite_Loop__while_true_01_good() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755607.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 194, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good5"
                }
              ], 
              "message": {
                "text": "good5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e5840b81e246aa6e", 
            "codesonarFingerprint": "b676b853ee6eebf3"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 194, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good5"
                          }
                        ], 
                        "message": {
                          "text": "good5() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755608.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 193, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good4"
                }
              ], 
              "message": {
                "text": "good4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "3e302a710281503c", 
            "codesonarFingerprint": "6c9fd4c274e3b7ae"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 193, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good4"
                          }
                        ], 
                        "message": {
                          "text": "good4() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755609.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 192, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good3"
                }
              ], 
              "message": {
                "text": "good3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7a816284c9a3d92e", 
            "codesonarFingerprint": "23fe80d1b568bbae"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 192, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good3"
                          }
                        ], 
                        "message": {
                          "text": "good3() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755610.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "stdThreadLockAcquire() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 161, 
                  "startColumn": 6, 
                  "endColumn": 46
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockAcquire"
                }
              ], 
              "message": {
                "text": "stdThreadLockAcquire() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "9d088120673671a6", 
            "codesonarFingerprint": "30702ca68f7c599e"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 161, 
                            "startColumn": 6, 
                            "endColumn": 46
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockAcquire"
                          }
                        ], 
                        "message": {
                          "text": "stdThreadLockAcquire() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755611.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 191, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good2"
                }
              ], 
              "message": {
                "text": "good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "f89e83544615e33b", 
            "codesonarFingerprint": "dd18330be4e0d3e2"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 191, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good2"
                          }
                        ], 
                        "message": {
                          "text": "good2() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755612.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 198, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good9"
                }
              ], 
              "message": {
                "text": "good9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "e2b4d189aa755055", 
            "codesonarFingerprint": "9905f1be700c971f"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 198, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good9"
                          }
                        ], 
                        "message": {
                          "text": "good9() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755613.html"
        }, 
        {
          "ruleId": "Use of <stdlib.h> Allocator/Deallocator", 
          "level": "warning", 
          "message": {
            "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 112, 
                  "startColumn": 5, 
                  "endColumn": 17
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadDestroy"
                }
              ], 
              "message": {
                "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "097dee0ab2795de9", 
            "codesonarFingerprint": "999ac8ac224756a7"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 112, 
                            "startColumn": 5, 
                            "endColumn": 17
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadDestroy"
                          }
                        ], 
                        "message": {
                          "text": "Use of free() is not recommended because it is a violation of some coding standards including MISRA C:2012 21.3: The memory allocation and deallocation functions of <stdlib.h> shall not be used.  See here for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 50.0, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755614.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 197, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good8"
                }
              ], 
              "message": {
                "text": "good8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "56d00f7f3d88e411", 
            "codesonarFingerprint": "5092ce96bed2c490"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 197, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good8"
                          }
                        ], 
                        "message": {
                          "text": "good8() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755615.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 196, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good7"
                }
              ], 
              "message": {
                "text": "good7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "347ce4c617d18fbe", 
            "codesonarFingerprint": "85106ad6417cabe7"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 196, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good7"
                          }
                        ], 
                        "message": {
                          "text": "good7() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755616.html"
        }, 
        {
          "ruleId": "Macro Does Not End With } or )", 
          "level": "warning", 
          "message": {
            "text": "The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 78, 
                  "startColumn": 1, 
                  "endColumn": 15
                }
              }, 
              "message": {
                "text": "The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "b15957ca4bfbbfa2", 
            "codesonarFingerprint": "b15957ca4bfbbfa2"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 9
                }, 
                "region": {
                  "startLine": 78, 
                  "startColumn": 1, 
                  "endColumn": 15
                }
              }, 
              "message": {
                "text": "The definition of true is not fully parenthesized.  - Unparenthesized macro definitions are legal, but can lead to unexpected behavior when the macro is used.  In particular, operator precedence may cause problems.  - Power of Ten Rule 8 and JPL Rule 20 require that macro definitions be \"complete syntactic units\"."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755617.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 195, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good6"
                }
              ], 
              "message": {
                "text": "good6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "c196328384e6bc41", 
            "codesonarFingerprint": "7222b71ada8bd14e"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 195, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good6"
                          }
                        ], 
                        "message": {
                          "text": "good6() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755618.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "good1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 190, 
                  "startColumn": 6, 
                  "endColumn": 13
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good1"
                }
              ], 
              "message": {
                "text": "good1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "170d654c75ab47e1", 
            "codesonarFingerprint": "32c0b64342b9af94"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 190, 
                            "startColumn": 6, 
                            "endColumn": 13
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good1"
                          }
                        ], 
                        "message": {
                          "text": "good1() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755625.html"
        }, 
        {
          "ruleId": "Warnings Not Treated As Errors", 
          "level": "warning", 
          "message": {
            "text": "File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 6
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 97
                }
              }, 
              "message": {
                "text": "File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "f1fc2f3bf52b8baa", 
            "codesonarFingerprint": "f1fc2f3bf52b8baa"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 6
                }, 
                "region": {
                  "startLine": 1, 
                  "startColumn": 1, 
                  "endColumn": 97
                }
              }, 
              "message": {
                "text": "File main_linux.cpp was compiled without the -Werror option, so compiler warnings were not treated as errors. The compilation command was:\n/usr/bin/gcc -Wall -Wextra -Wpedantic -I ../testcasesupport \nSee the parse details log for further information about this compilation."
              }
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755637.html"
        }, 
        {
          "ruleId": "Not Enough Assertions", 
          "level": "warning", 
          "message": {
            "text": "main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 6
                }, 
                "region": {
                  "startLine": 11, 
                  "startColumn": 5, 
                  "endColumn": 34
                }
              }, 
              "logicalLocations": [
                {
                  "name": "main"
                }
              ], 
              "message": {
                "text": "main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "086dae7978d3a947", 
            "codesonarFingerprint": "76300ba86ebf1124"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 6
                          }, 
                          "region": {
                            "startLine": 11, 
                            "startColumn": 5, 
                            "endColumn": 34
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "main"
                          }
                        ], 
                        "message": {
                          "text": "main() does not contain any assertions.  - CodeSonar is configured to issue a warning whenever a function does not contain at least 2 assertions.      -  To configure this behavior, use configuration parameters MIN_ASSERTS and MIN_ASSERTS_FUNCTION_LENGTH.  - Assertions ensure that assumptions made in the code are valid and enforced.  - Power of Ten Rule 5 and JPL Rule 16 require that a minimum acceptable proportion of assertions be defined and enforced."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755638.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 46, 
                  "startColumn": 5, 
                  "endColumn": 22
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good2"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "fde64b3a6336b69c", 
            "codesonarFingerprint": "20df901e51d6804c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 2
                          }, 
                          "region": {
                            "startLine": 46, 
                            "startColumn": 5, 
                            "endColumn": 22
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good2"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755639.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 5, 
                  "endColumn": 23
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__for_01_bad"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "df08efaf77b959eb", 
            "codesonarFingerprint": "c04517e4e24c0693"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 2
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 5, 
                            "endColumn": 23
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__for_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755641.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 11, 
                  "endColumn": 17
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__while_01_bad"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "664e4d2c1d55aae3", 
            "codesonarFingerprint": "5420028d5fff98bf"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 4
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 11, 
                            "endColumn": 17
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__while_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755642.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 5, 
                  "endColumn": 7
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__do_01_bad"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "f2ee754bac6efafe", 
            "codesonarFingerprint": "fb80094d106771e8"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 0
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 5, 
                            "endColumn": 7
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__do_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755643.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 5
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 11, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__while_true_01_bad"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "fa36b9a199b956ec", 
            "codesonarFingerprint": "37d7b62c3aeba5c0"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 5
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 11, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__while_true_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755647.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 5, 
                  "endColumn": 7
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__do_true_01_bad"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "90a4468254ac5dc6", 
            "codesonarFingerprint": "550fa0954b53c878"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 5, 
                            "endColumn": 7
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__do_true_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755648.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 3
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 5, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "CWE835_Infinite_Loop__for_empty_01_bad"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "a4cd11bf60f0b964", 
            "codesonarFingerprint": "5e997acdecf4c128"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 3
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 5, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "CWE835_Infinite_Loop__for_empty_01_bad"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755649.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 5
                }, 
                "region": {
                  "startLine": 30, 
                  "startColumn": 11, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good1"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "74b55b3083347647", 
            "codesonarFingerprint": "ad274eecfbfc2a21"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 5
                          }, 
                          "region": {
                            "startLine": 30, 
                            "startColumn": 11, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good1"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755650.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 3
                }, 
                "region": {
                  "startLine": 31, 
                  "startColumn": 5, 
                  "endColumn": 12
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good1"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "bedcdfe97142192d", 
            "codesonarFingerprint": "dbafce1af3131f29"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 3
                          }, 
                          "region": {
                            "startLine": 31, 
                            "startColumn": 5, 
                            "endColumn": 12
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good1"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755651.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                }, 
                "region": {
                  "startLine": 31, 
                  "startColumn": 5, 
                  "endColumn": 7
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good1"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "8ee9a7ef46707a18", 
            "codesonarFingerprint": "d03b4b4c33ffeb96"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1
                          }, 
                          "region": {
                            "startLine": 31, 
                            "startColumn": 5, 
                            "endColumn": 7
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good1"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded because it could not identify a candidate loop counter (What is a loop counter?).  - The loop test does not include any terms where a variable is compared against some other expression using <, <=, >, or >=."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755652.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 4
                }, 
                "region": {
                  "startLine": 30, 
                  "startColumn": 11, 
                  "endColumn": 17
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good1"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "1a11e945914294d0", 
            "codesonarFingerprint": "12da2cb13012a31a"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 4
                          }, 
                          "region": {
                            "startLine": 30, 
                            "startColumn": 11, 
                            "endColumn": 17
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good1"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755654.html"
        }, 
        {
          "ruleId": "Potential Unbounded Loop", 
          "level": "warning", 
          "message": {
            "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 2
                }, 
                "region": {
                  "startLine": 30, 
                  "startColumn": 5, 
                  "endColumn": 23
                }
              }, 
              "logicalLocations": [
                {
                  "name": "good1"
                }
              ], 
              "message": {
                "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "af67422dafc1546b", 
            "codesonarFingerprint": "ce145aee2616ffd3"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 2
                          }, 
                          "region": {
                            "startLine": 30, 
                            "startColumn": 5, 
                            "endColumn": 23
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "good1"
                          }
                        ], 
                        "message": {
                          "text": "CodeSonar could not determine that the loop is bounded.  - The following were identified as candidate loop counters, but could not be used to establish boundedness (What is a loop counter?).  - iis a candidate loop counter, but CodeSonar cannot determine whether the loop is incrementing or decrementing i.      - The loop updates i in a manner that is too complex for this analysis."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 45.0166015625, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755655.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer bytes is dereferenced in the body of decodeHexChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexChars() (before it is used), or      - at any point leading up to the call to decodeHexChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 3, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 128, 
                  "startColumn": 9, 
                  "endColumn": 49
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexChars"
                }
              ], 
              "message": {
                "text": "Pointer bytes is dereferenced in the body of decodeHexChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexChars() (before it is used), or      - at any point leading up to the call to decodeHexChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "b635f5dbcff62933", 
            "codesonarFingerprint": "e98bb6610fa79b3a"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 116, 
                            "startColumn": 8, 
                            "endColumn": 80
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "bytes is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 124, 
                            "startColumn": 37, 
                            "endColumn": 103
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  - numWritten < numBytes evaluates to true.  - isxdigit(hex[2 * numWritten]) evaluates to true.  - isxdigit(...) evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "loop true"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 128, 
                            "startColumn": 9, 
                            "endColumn": 49
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "Pointer bytes is dereferenced in the body of decodeHexChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexChars() (before it is used), or      - at any point leading up to the call to decodeHexChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.079605102539062, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755657.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer hex is dereferenced in the body of decodeHexWChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexWChars() (before it is used), or      - at any point leading up to the call to decodeHexWChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 3, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 146, 
                  "startColumn": 47, 
                  "endColumn": 66
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexWChars"
                }
              ], 
              "message": {
                "text": "Pointer hex is dereferenced in the body of decodeHexWChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexWChars() (before it is used), or      - at any point leading up to the call to decodeHexWChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "b01701fb9e4687f3", 
            "codesonarFingerprint": "fc6b3f7c5a44069c"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 138, 
                            "startColumn": 9, 
                            "endColumn": 85
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "hex is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 47, 
                            "endColumn": 66
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  numWritten < numBytes evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "loop true"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 47, 
                            "endColumn": 66
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "Pointer hex is dereferenced in the body of decodeHexWChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexWChars() (before it is used), or      - at any point leading up to the call to decodeHexWChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08399200439453, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755658.html"
        }, 
        {
          "ruleId": "Uninitialized Variable", 
          "level": "error", 
          "message": {
            "text": "byte was not initialized.  - byte was defined at io.c:126.The issue can occur if the highlighted code executes."
          }, 
          "locations": [
            {
              "id": 3, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 128, 
                  "startColumn": 9, 
                  "endColumn": 49
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexChars"
                }
              ], 
              "message": {
                "text": "byte was not initialized.  - byte was defined at io.c:126.The issue can occur if the highlighted code executes."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "2ebe601b20e53b69", 
            "codesonarFingerprint": "6eac6fa714ae8825"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 124, 
                            "startColumn": 37, 
                            "endColumn": 103
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  - numWritten < numBytes evaluates to true.  - isxdigit(hex[2 * numWritten]) evaluates to true.  - isxdigit(...) evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "loop true"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 127, 
                            "startColumn": 9, 
                            "endColumn": 52
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "__isoc99_sscanf() does not initialize byte.  - This may be because of a failure case or other special case for __isoc99_sscanf().  Consult the  __isoc99_sscanf() documentation for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 128, 
                            "startColumn": 9, 
                            "endColumn": 49
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "byte was not initialized.  - byte was defined at io.c:126.The issue can occur if the highlighted code executes."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 63.4525260925293, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755660.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer bytes is dereferenced in the body of printBytesLine(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside printBytesLine() (before it is used), or      - at any point leading up to the call to printBytesLine().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 3, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 108, 
                  "startColumn": 24, 
                  "endColumn": 32
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printBytesLine"
                }
              ], 
              "message": {
                "text": "Pointer bytes is dereferenced in the body of printBytesLine(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside printBytesLine() (before it is used), or      - at any point leading up to the call to printBytesLine().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "2971bf16cc6af23e", 
            "codesonarFingerprint": "c16c2e55f8fdea9b"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 103, 
                            "startColumn": 6, 
                            "endColumn": 66
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printBytesLine"
                          }
                        ], 
                        "message": {
                          "text": "bytes is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 106, 
                            "startColumn": 1, 
                            "endColumn": 35
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printBytesLine"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  i < numBytes evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "branch"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 108, 
                            "startColumn": 24, 
                            "endColumn": 32
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printBytesLine"
                          }
                        ], 
                        "message": {
                          "text": "Pointer bytes is dereferenced in the body of printBytesLine(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside printBytesLine() (before it is used), or      - at any point leading up to the call to printBytesLine().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08399200439453, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755661.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer thread is dereferenced in the body of internal_start(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside internal_start() (before it is used), or      - at any point leading up to the call to internal_start().  - thread evaluates to args.  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 3, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 35, 
                  "startColumn": 19, 
                  "endColumn": 31
                }
              }, 
              "logicalLocations": [
                {
                  "name": "internal_start"
                }
              ], 
              "message": {
                "text": "Pointer thread is dereferenced in the body of internal_start(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside internal_start() (before it is used), or      - at any point leading up to the call to internal_start().  - thread evaluates to args.  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "fb1bc43fa75487b6", 
            "codesonarFingerprint": "b187507619ee0d14"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 30, 
                            "startColumn": 14, 
                            "endColumn": 40
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "internal_start"
                          }
                        ], 
                        "message": {
                          "text": "args is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 33, 
                            "startColumn": 15, 
                            "endColumn": 39
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "internal_start"
                          }
                        ], 
                        "message": {
                          "text": "thread is set to args."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 35, 
                            "startColumn": 19, 
                            "endColumn": 31
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "internal_start"
                          }
                        ], 
                        "message": {
                          "text": "Pointer thread is dereferenced in the body of internal_start(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside internal_start() (before it is used), or      - at any point leading up to the call to internal_start().  - thread evaluates to args.  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 23.684417724609375, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755664.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer hex is dereferenced in the body of decodeHexChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexChars() (before it is used), or      - at any point leading up to the call to decodeHexChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 3, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 124, 
                  "startColumn": 46, 
                  "endColumn": 65
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexChars"
                }
              ], 
              "message": {
                "text": "Pointer hex is dereferenced in the body of decodeHexChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexChars() (before it is used), or      - at any point leading up to the call to decodeHexChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "7613e417c220a930", 
            "codesonarFingerprint": "ad2d6919726c2311"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 116, 
                            "startColumn": 8, 
                            "endColumn": 80
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "hex is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 124, 
                            "startColumn": 46, 
                            "endColumn": 65
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  numWritten < numBytes evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "loop true"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 124, 
                            "startColumn": 46, 
                            "endColumn": 65
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexChars"
                          }
                        ], 
                        "message": {
                          "text": "Pointer hex is dereferenced in the body of decodeHexChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexChars() (before it is used), or      - at any point leading up to the call to decodeHexChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08399200439453, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755666.html"
        }, 
        {
          "ruleId": "Cast Alters Value", 
          "level": "error", 
          "message": {
            "text": "time(__null) is cast from long to unsigned int.  - time(__null) could be -1 or lower.  - Negative values cannot be stored as unsigned int.  Casting them to unsigned int can cause data loss or sign change.The issue can occur if the highlighted code executes."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 6
                }, 
                "region": {
                  "startLine": 15, 
                  "startColumn": 9, 
                  "endColumn": 29
                }
              }, 
              "logicalLocations": [
                {
                  "name": "main"
                }
              ], 
              "message": {
                "text": "time(__null) is cast from long to unsigned int.  - time(__null) could be -1 or lower.  - Negative values cannot be stored as unsigned int.  Casting them to unsigned int can cause data loss or sign change.The issue can occur if the highlighted code executes."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "8829629a9fc1a009", 
            "codesonarFingerprint": "8ae44e99f4408703"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 6
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 9, 
                            "endColumn": 29
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "main"
                          }
                        ], 
                        "message": {
                          "text": "time() returns a potentially dangerous value [potentially dangerous: the value cannot be determined and may come from program input].  - Determines the value that is cast in the Cast Alters Value warning later."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 6
                          }, 
                          "region": {
                            "startLine": 15, 
                            "startColumn": 9, 
                            "endColumn": 29
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "main"
                          }
                        ], 
                        "message": {
                          "text": "time(__null) is cast from long to unsigned int.  - time(__null) could be -1 or lower.  - Negative values cannot be stored as unsigned int.  Casting them to unsigned int can cause data loss or sign change.The issue can occur if the highlighted code executes."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 43.82912063598633, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755667.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer bytes is dereferenced in the body of decodeHexWChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexWChars() (before it is used), or      - at any point leading up to the call to decodeHexWChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 5, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 150, 
                  "startColumn": 9, 
                  "endColumn": 49
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexWChars"
                }
              ], 
              "message": {
                "text": "Pointer bytes is dereferenced in the body of decodeHexWChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexWChars() (before it is used), or      - at any point leading up to the call to decodeHexWChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "de3fe1ea2168ee4a", 
            "codesonarFingerprint": "85b809ee1352ef7d"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 138, 
                            "startColumn": 9, 
                            "endColumn": 85
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "bytes is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 37, 
                            "endColumn": 105
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  - numWritten < numBytes evaluates to true.  - iswxdigit(hex[2 * numWritten]) evaluates to true.  - iswxdigit(...) evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "loop true"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 37, 
                            "endColumn": 105
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "iswxdigit() is an Undefined Function."
                        }
                      }, 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 4, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 37, 
                            "endColumn": 105
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "iswxdigit() is an Undefined Function."
                        }
                      }, 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 5, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 150, 
                            "startColumn": 9, 
                            "endColumn": 49
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "Pointer bytes is dereferenced in the body of decodeHexWChars(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside decodeHexWChars() (before it is used), or      - at any point leading up to the call to decodeHexWChars().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.079605102539062, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755670.html"
        }, 
        {
          "ruleId": "Scope Could Be Local Static", 
          "level": "warning", 
          "message": {
            "text": "globalArgv could be local static to main in main_linux.cpp.  - globalArgv is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 218, 
                  "startColumn": 1, 
                  "endColumn": 26
                }
              }, 
              "message": {
                "text": "globalArgv could be local static to main in main_linux.cpp.  - globalArgv is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "f7ab9bcc2be4ecbb", 
            "codesonarFingerprint": "f7ab9bcc2be4ecbb"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 218, 
                  "startColumn": 1, 
                  "endColumn": 26
                }
              }, 
              "message": {
                "text": "globalArgv could be local static to main in main_linux.cpp.  - globalArgv is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\"."
              }
            }
          ], 
          "rank": 47.50208282470703, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755671.html"
        }, 
        {
          "ruleId": "Uninitialized Variable", 
          "level": "error", 
          "message": {
            "text": "byte was not initialized.  - byte was defined at io.c:148.The issue can occur if the highlighted code executes."
          }, 
          "locations": [
            {
              "id": 5, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 150, 
                  "startColumn": 9, 
                  "endColumn": 49
                }
              }, 
              "logicalLocations": [
                {
                  "name": "decodeHexWChars"
                }
              ], 
              "message": {
                "text": "byte was not initialized.  - byte was defined at io.c:148.The issue can occur if the highlighted code executes."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "d3f05496ffa00105", 
            "codesonarFingerprint": "9295829f2215d4ed"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 37, 
                            "endColumn": 105
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "Entering loop body.  - numWritten < numBytes evaluates to true.  - iswxdigit(hex[2 * numWritten]) evaluates to true.  - iswxdigit(...) evaluates to true."
                        }
                      }, 
                      "kinds": [
                        "loop true"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 37, 
                            "endColumn": 105
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "iswxdigit() is an Undefined Function."
                        }
                      }, 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 3, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 146, 
                            "startColumn": 37, 
                            "endColumn": 105
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "iswxdigit() is an Undefined Function."
                        }
                      }, 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 4, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 149, 
                            "startColumn": 9, 
                            "endColumn": 54
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "__isoc99_swscanf() does not initialize byte.  - This may be because of a failure case or other special case for __isoc99_swscanf().  Consult the  __isoc99_swscanf() documentation for more information."
                        }
                      }, 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 5, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 150, 
                            "startColumn": 9, 
                            "endColumn": 49
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "decodeHexWChars"
                          }
                        ], 
                        "message": {
                          "text": "byte was not initialized.  - byte was defined at io.c:148.The issue can occur if the highlighted code executes."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 63.4525260925293, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755672.html"
        }, 
        {
          "ruleId": "Scope Could Be Local Static", 
          "level": "warning", 
          "message": {
            "text": "globalArgc could be local static to main in main_linux.cpp.  - globalArgc is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\"."
          }, 
          "locations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 217, 
                  "startColumn": 1, 
                  "endColumn": 20
                }
              }, 
              "message": {
                "text": "globalArgc could be local static to main in main_linux.cpp.  - globalArgc is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\"."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "a9709b445302f5a8", 
            "codesonarFingerprint": "a9709b445302f5a8"
          }, 
          "relatedLocations": [
            {
              "id": 1, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 217, 
                  "startColumn": 1, 
                  "endColumn": 20
                }
              }, 
              "message": {
                "text": "globalArgc could be local static to main in main_linux.cpp.  - globalArgc is only used inside main().  - Power of Ten Rule 6 and JPL Rule 13 require that data objects be declared at \"the smallest possible level of scope\"."
              }
            }
          ], 
          "rank": 47.50208282470703, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755673.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer thread is dereferenced in the body of stdThreadJoin(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadJoin() (before it is used), or      - at any point leading up to the call to stdThreadJoin().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 100, 
                  "startColumn": 27, 
                  "endColumn": 41
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadJoin"
                }
              ], 
              "message": {
                "text": "Pointer thread is dereferenced in the body of stdThreadJoin(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadJoin() (before it is used), or      - at any point leading up to the call to stdThreadJoin().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "96c2af3529d73439", 
            "codesonarFingerprint": "eabed3ff5e113623"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 91, 
                            "startColumn": 5, 
                            "endColumn": 36
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadJoin"
                          }
                        ], 
                        "message": {
                          "text": "thread is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 100, 
                            "startColumn": 27, 
                            "endColumn": 41
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadJoin"
                          }
                        ], 
                        "message": {
                          "text": "Pointer thread is dereferenced in the body of stdThreadJoin(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadJoin() (before it is used), or      - at any point leading up to the call to stdThreadJoin().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08435821533203, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755674.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer thread is dereferenced in the body of stdThreadCreate(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadCreate() (before it is used), or      - at any point leading up to the call to stdThreadCreate().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 57, 
                  "startColumn": 5, 
                  "endColumn": 19
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadCreate"
                }
              ], 
              "message": {
                "text": "Pointer thread is dereferenced in the body of stdThreadCreate(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadCreate() (before it is used), or      - at any point leading up to the call to stdThreadCreate().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "106320ee8ed2965e", 
            "codesonarFingerprint": "037e9e5a664d857d"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 48, 
                            "startColumn": 5, 
                            "endColumn": 75
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadCreate"
                          }
                        ], 
                        "message": {
                          "text": "thread is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 57, 
                            "startColumn": 5, 
                            "endColumn": 19
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadCreate"
                          }
                        ], 
                        "message": {
                          "text": "Pointer thread is dereferenced in the body of stdThreadCreate(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadCreate() (before it is used), or      - at any point leading up to the call to stdThreadCreate().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08472442626953, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755675.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer structTwoIntsStruct is dereferenced in the body of printStructLine(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside printStructLine() (before it is used), or      - at any point leading up to the call to printStructLine().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                }, 
                "region": {
                  "startLine": 100, 
                  "startColumn": 55, 
                  "endColumn": 82
                }
              }, 
              "logicalLocations": [
                {
                  "name": "printStructLine"
                }
              ], 
              "message": {
                "text": "Pointer structTwoIntsStruct is dereferenced in the body of printStructLine(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside printStructLine() (before it is used), or      - at any point leading up to the call to printStructLine().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "4c2b3c07343fd27b", 
            "codesonarFingerprint": "67a6fee09d22122e"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 98, 
                            "startColumn": 6, 
                            "endColumn": 65
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printStructLine"
                          }
                        ], 
                        "message": {
                          "text": "structTwoIntsStruct is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          }, 
                          "region": {
                            "startLine": 100, 
                            "startColumn": 55, 
                            "endColumn": 82
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "printStructLine"
                          }
                        ], 
                        "message": {
                          "text": "Pointer structTwoIntsStruct is dereferenced in the body of printStructLine(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside printStructLine() (before it is used), or      - at any point leading up to the call to printStructLine().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08472442626953, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755676.html"
        }, 
        {
          "ruleId": "Unchecked Parameter Dereference", 
          "level": "warning", 
          "message": {
            "text": "Pointer lock is dereferenced in the body of stdThreadLockCreate(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadLockCreate() (before it is used), or      - at any point leading up to the call to stdThreadLockCreate().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
          }, 
          "locations": [
            {
              "id": 2, 
              "physicalLocation": {
                "artifactLocation": {
                  "index": 11
                }, 
                "region": {
                  "startLine": 137, 
                  "startColumn": 5, 
                  "endColumn": 17
                }
              }, 
              "logicalLocations": [
                {
                  "name": "stdThreadLockCreate"
                }
              ], 
              "message": {
                "text": "Pointer lock is dereferenced in the body of stdThreadLockCreate(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadLockCreate() (before it is used), or      - at any point leading up to the call to stdThreadLockCreate().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
              }
            }
          ], 
          "fingerprints": {
            "codesonarCluster": "31c9c42363bbd51d", 
            "codesonarFingerprint": "64cffb9f187e1b09"
          }, 
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 1, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 133, 
                            "startColumn": 5, 
                            "endColumn": 45
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockCreate"
                          }
                        ], 
                        "message": {
                          "text": "lock is a parameter."
                        }
                      }, 
                      "kinds": [
                        "assignment"
                      ], 
                      "nestingLevel": 1
                    }, 
                    {
                      "location": {
                        "id": 2, 
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 11
                          }, 
                          "region": {
                            "startLine": 137, 
                            "startColumn": 5, 
                            "endColumn": 17
                          }
                        }, 
                        "logicalLocations": [
                          {
                            "name": "stdThreadLockCreate"
                          }
                        ], 
                        "message": {
                          "text": "Pointer lock is dereferenced in the body of stdThreadLockCreate(), but may be NULL or otherwise invalid.  - When the highlighted code is executed, the pointers's validity is not checked:      - inside stdThreadLockCreate() (before it is used), or      - at any point leading up to the call to stdThreadLockCreate().  - For pointers, a check for validity must at least establish that the value is greater than zero.  - Power of Ten Rule 7 and JPL Rule 15 require that the validity of function parameters be checked before they are used."
                        }
                      }, 
                      "nestingLevel": 1
                    }
                  ]
                }
              ]
            }
          ], 
          "rank": 24.08435821533203, 
          "hostedViewerUri": "https://fake-codesonar-hub.com/warninginstance/755677.html"
        }
      ]
    }
  ]
}