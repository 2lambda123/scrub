{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "Semmle Core",
        "productSuite" : "Semmle",
        "version" : "1.22.1",
        "rules" : [ {
          "id" : "java/incomplete-parity-check",
          "name" : "java/incomplete-parity-check",
          "shortDescription" : {
            "text" : "Bad parity check"
          },
          "fullDescription" : {
            "text" : "Code that uses 'x % 2 == 1' or 'x % 2 > 0' to check whether a number is odd does not work for negative numbers."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Bad parity check",
            "description" : "Code that uses 'x % 2 == 1' or 'x % 2 > 0' to check whether a number is odd does not\n              work for negative numbers.",
            "id" : "java/incomplete-parity-check",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/BadCheckOdd.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/implicit-cast-in-compound-assignment",
          "name" : "java/implicit-cast-in-compound-assignment",
          "shortDescription" : {
            "text" : "Implicit narrowing conversion in compound assignment"
          },
          "fullDescription" : {
            "text" : "Compound assignment statements (for example 'intvar += longvar') that implicitly cast a value of a wider type to a narrower type may result in information loss and numeric errors such as overflows."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-190", "external/cwe/cwe-192", "external/cwe/cwe-197", "external/cwe/cwe-681" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Implicit narrowing conversion in compound assignment",
            "description" : "Compound assignment statements (for example 'intvar += longvar') that implicitly\n              cast a value of a wider type to a narrower type may result in information loss and\n              numeric errors such as overflows.",
            "id" : "java/implicit-cast-in-compound-assignment",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/InformationLoss.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/integer-multiplication-cast-to-long",
          "name" : "java/integer-multiplication-cast-to-long",
          "shortDescription" : {
            "text" : "Result of multiplication cast to wider type"
          },
          "fullDescription" : {
            "text" : "Casting the result of a multiplication to a wider type instead of casting before the multiplication may cause overflow."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "security", "correctness", "types", "external/cwe/cwe-190", "external/cwe/cwe-192", "external/cwe/cwe-197", "external/cwe/cwe-681" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Result of multiplication cast to wider type",
            "description" : "Casting the result of a multiplication to a wider type instead of casting\n              before the multiplication may cause overflow.",
            "id" : "java/integer-multiplication-cast-to-long",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/IntMultToLong.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/multiplication-of-remainder",
          "name" : "java/multiplication-of-remainder",
          "shortDescription" : {
            "text" : "Multiplication of remainder"
          },
          "fullDescription" : {
            "text" : "Using the remainder operator with the multiplication operator without adding parentheses to clarify precedence may cause confusion."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Multiplication of remainder",
            "description" : "Using the remainder operator with the multiplication operator without adding\n              parentheses to clarify precedence may cause confusion.",
            "id" : "java/multiplication-of-remainder",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/MultiplyRemainder.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/bitwise-sign-check",
          "name" : "java/bitwise-sign-check",
          "shortDescription" : {
            "text" : "Sign check of bitwise operation"
          },
          "fullDescription" : {
            "text" : "Checking the sign of the result of a bitwise operation may yield unexpected results."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Sign check of bitwise operation",
            "description" : "Checking the sign of the result of a bitwise operation may yield unexpected results.",
            "id" : "java/bitwise-sign-check",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/BitwiseSignCheck.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/equality-test-on-floating-point",
          "name" : "java/equality-test-on-floating-point",
          "shortDescription" : {
            "text" : "Equality test on floating point values"
          },
          "fullDescription" : {
            "text" : "Equality tests on floating point values may lead to unexpected results."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Equality test on floating point values",
            "description" : "Equality tests on floating point values may lead to unexpected results.",
            "id" : "java/equality-test-on-floating-point",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/NoComparisonOnFloats.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/type-mismatch-in-conditional",
          "name" : "java/type-mismatch-in-conditional",
          "shortDescription" : {
            "text" : "Type mismatch in conditional expression"
          },
          "fullDescription" : {
            "text" : "Using the '(p?e1:e2)' operator with different primitive types for the second and third operands may cause unexpected results."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Type mismatch in conditional expression",
            "description" : "Using the '(p?e1:e2)' operator with different primitive types for the second and\n              third operands may cause unexpected results.",
            "id" : "java/type-mismatch-in-conditional",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/CondExprTypes.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/octal-literal",
          "name" : "java/octal-literal",
          "shortDescription" : {
            "text" : "Use of octal values"
          },
          "fullDescription" : {
            "text" : "An integer literal that starts with '0' may cause a problem. If the '0' is intentional, a programmer may misread the literal as a decimal literal. If the '0' is unintentional and a decimal literal is intended, the compiler treats the literal as an octal literal."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Use of octal values",
            "description" : "An integer literal that starts with '0' may cause a problem. If the '0' is\n              intentional, a programmer may misread the literal as a decimal literal. If the '0'\n              is unintentional and a decimal literal is intended, the compiler treats the\n              literal as an octal literal.",
            "id" : "java/octal-literal",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/OctalLiteral.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/call-to-thread-run",
          "name" : "java/call-to-thread-run",
          "shortDescription" : {
            "text" : "Direct call to a run() method"
          },
          "fullDescription" : {
            "text" : "Directly calling a 'Thread' object's 'run' method does not start a separate thread but executes the method within the current thread."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-572" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Direct call to a run() method",
            "description" : "Directly calling a 'Thread' object's 'run' method does not start a separate thread\n              but executes the method within the current thread.",
            "id" : "java/call-to-thread-run",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/CallsToRunnableRun.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/empty-run-method-in-thread",
          "name" : "java/empty-run-method-in-thread",
          "shortDescription" : {
            "text" : "Useless run() method in thread"
          },
          "fullDescription" : {
            "text" : "Thread instances that neither get an argument of type 'Runnable' passed to their constructor nor override the 'Thread.run' method are likely to have no effect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Useless run() method in thread",
            "description" : "Thread instances that neither get an argument of type 'Runnable' passed to their\n              constructor nor override the 'Thread.run' method are likely to have no effect.",
            "id" : "java/empty-run-method-in-thread",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/EmptyRunMethodInThread.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/notify-instead-of-notify-all",
          "name" : "java/notify-instead-of-notify-all",
          "shortDescription" : {
            "text" : "notify instead of notifyAll"
          },
          "fullDescription" : {
            "text" : "Calling 'notify' instead of 'notifyAll' may fail to wake up the correct thread and cannot wake up multiple threads."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-662" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "notify instead of notifyAll",
            "description" : "Calling 'notify' instead of 'notifyAll' may fail to wake up the correct thread and\n              cannot wake up multiple threads.",
            "id" : "java/notify-instead-of-notify-all",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/NotifyNotNotifyAll.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/thread-priority",
          "name" : "java/thread-priority",
          "shortDescription" : {
            "text" : "Explicit thread priority"
          },
          "fullDescription" : {
            "text" : "Setting thread priorities to control interactions between threads is not portable, and may not have the desired effect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "portability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Explicit thread priority",
            "description" : "Setting thread priorities to control interactions between threads is not portable,\n              and may not have the desired effect.",
            "id" : "java/thread-priority",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/PriorityCalls.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/thread-start-in-constructor",
          "name" : "java/thread-start-in-constructor",
          "shortDescription" : {
            "text" : "Start of thread in constructor"
          },
          "fullDescription" : {
            "text" : "Starting a thread within a constructor may cause the thread to start before any subclass constructor has completed its initialization, causing unexpected results."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Start of thread in constructor",
            "description" : "Starting a thread within a constructor may cause the thread to start before\n              any subclass constructor has completed its initialization, causing unexpected\n              results.",
            "id" : "java/thread-start-in-constructor",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/StartInConstructor.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/thread-yield-call",
          "name" : "java/thread-yield-call",
          "shortDescription" : {
            "text" : "Call to Thread.yield()"
          },
          "fullDescription" : {
            "text" : "Calling 'Thread.yield' may have no effect, and is not a reliable way to prevent a thread from taking up too much execution time."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Call to Thread.yield()",
            "description" : "Calling 'Thread.yield' may have no effect, and is not a reliable way to prevent a\n              thread from taking up too much execution time.",
            "id" : "java/thread-yield-call",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/YieldCalls.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/spin-on-field",
          "name" : "java/spin-on-field",
          "shortDescription" : {
            "text" : "Spin on field"
          },
          "fullDescription" : {
            "text" : "Repeatedly reading a non-volatile field within the condition of an empty loop may result in an infinite loop."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Spin on field",
            "description" : "Repeatedly reading a non-volatile field within the condition of an empty loop may\n              result in an infinite loop.",
            "id" : "java/spin-on-field",
            "query-path" : "/semmlecode-queries/Likely Bugs/Termination/SpinOnField.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unsafe-sync-on-field",
          "name" : "java/unsafe-sync-on-field",
          "shortDescription" : {
            "text" : "Futile synchronization on field"
          },
          "fullDescription" : {
            "text" : "Synchronizing on a field and updating that field while the lock is held is unlikely to provide the desired thread safety."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-662" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Futile synchronization on field",
            "description" : "Synchronizing on a field and updating that field while the lock is held is unlikely\n              to provide the desired thread safety.",
            "id" : "java/unsafe-sync-on-field",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/FutileSynchOnField.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/inconsistent-field-synchronization",
          "name" : "java/inconsistent-field-synchronization",
          "shortDescription" : {
            "text" : "Inconsistent synchronization for field"
          },
          "fullDescription" : {
            "text" : "If a field is mostly accessed in a synchronized context, but occasionally accessed in a non-synchronized way, the non-synchronized accesses may lead to race conditions."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-662", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Inconsistent synchronization for field",
            "description" : "If a field is mostly accessed in a synchronized context, but occasionally accessed\n              in a non-synchronized way, the non-synchronized accesses may lead to race\n              conditions.",
            "id" : "java/inconsistent-field-synchronization",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/InconsistentAccess.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/unsynchronized-getter",
          "name" : "java/unsynchronized-getter",
          "shortDescription" : {
            "text" : "Inconsistent synchronization of getter and setter"
          },
          "fullDescription" : {
            "text" : "If a class has a synchronized 'set' method, and a similarly-named 'get' method is not also synchronized, calls to the 'get' method may not return a consistent state for the object."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-413", "external/cwe/cwe-662" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Inconsistent synchronization of getter and setter",
            "description" : "If a class has a synchronized 'set' method, and a similarly-named 'get' method is\n              not also synchronized, calls to the 'get' method may not return a consistent state\n              for the object.",
            "id" : "java/unsynchronized-getter",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/SynchSetUnsynchGet.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/inconsistent-sync-writeobject",
          "name" : "java/inconsistent-sync-writeobject",
          "shortDescription" : {
            "text" : "Inconsistent synchronization for writeObject()"
          },
          "fullDescription" : {
            "text" : "Classes with a synchronized 'writeObject' method but no other synchronized methods usually lack a sufficient level of synchronization."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-662" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Inconsistent synchronization for writeObject()",
            "description" : "Classes with a synchronized 'writeObject' method but no other\n              synchronized methods usually lack a sufficient level of synchronization.",
            "id" : "java/inconsistent-sync-writeobject",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/SynchWriteObject.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/empty-synchronized-block",
          "name" : "java/empty-synchronized-block",
          "shortDescription" : {
            "text" : "Empty synchronized block"
          },
          "fullDescription" : {
            "text" : "Empty synchronized blocks may indicate the presence of incomplete code or incorrect synchronization, and may lead to concurrency problems."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-585" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Empty synchronized block",
            "description" : "Empty synchronized blocks may indicate the presence of\n              incomplete code or incorrect synchronization, and may lead to concurrency problems.",
            "id" : "java/empty-synchronized-block",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/EmptySynchronizedBlock.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-sync-override",
          "name" : "java/non-sync-override",
          "shortDescription" : {
            "text" : "Non-synchronized override of synchronized method"
          },
          "fullDescription" : {
            "text" : "If a synchronized method is overridden in a subclass, and the overriding method is not synchronized, the thread-safety of the subclass may be broken."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-820" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Non-synchronized override of synchronized method",
            "description" : "If a synchronized method is overridden in a subclass, and the overriding method is\n              not synchronized, the thread-safety of the subclass may be broken.",
            "id" : "java/non-sync-override",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/NonSynchronizedOverride.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/sync-on-boxed-types",
          "name" : "java/sync-on-boxed-types",
          "shortDescription" : {
            "text" : "Synchronization on boxed types or strings"
          },
          "fullDescription" : {
            "text" : "Synchronizing on boxed types or strings may lead to deadlock since an instance of that type is likely to be shared between many parts of the program."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "language-features", "external/cwe/cwe-662" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Synchronization on boxed types or strings",
            "description" : "Synchronizing on boxed types or strings may lead to\n              deadlock since an instance of that type is likely to\n              be shared between many parts of the program.",
            "id" : "java/sync-on-boxed-types",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/SynchOnBoxedType.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/notify-without-sync",
          "name" : "java/notify-without-sync",
          "shortDescription" : {
            "text" : "Notify on unlocked object"
          },
          "fullDescription" : {
            "text" : "Calling 'wait', 'notify', or 'notifyAll' on an object which has not been locked (with a synchronized method or statement) will throw."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness", "concurrency", "language-features" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Notify on unlocked object",
            "description" : "Calling 'wait', 'notify', or 'notifyAll' on an object which has not\n              been locked (with a synchronized method or statement) will throw.",
            "id" : "java/notify-without-sync",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/NotifyWithoutSynch.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/thread-unsafe-dateformat",
          "name" : "java/thread-unsafe-dateformat",
          "shortDescription" : {
            "text" : "Thread-unsafe use of DateFormat"
          },
          "fullDescription" : {
            "text" : "Static fields of type 'DateFormat' (or its descendants) should be avoided because the class 'DateFormat' is not thread-safe."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Thread-unsafe use of DateFormat",
            "description" : "Static fields of type 'DateFormat' (or its descendants) should be avoided\n              because the class 'DateFormat' is not thread-safe.",
            "id" : "java/thread-unsafe-dateformat",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/DateFormatThreadUnsafe.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/lazy-initialization",
          "name" : "java/lazy-initialization",
          "shortDescription" : {
            "text" : "Incorrect lazy initialization of a static field"
          },
          "fullDescription" : {
            "text" : "Initializing a static field without synchronization can be problematic in a multi-threaded context."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-543", "external/cwe/cwe-609" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Incorrect lazy initialization of a static field",
            "description" : "Initializing a static field without synchronization can be problematic\n              in a multi-threaded context.",
            "id" : "java/lazy-initialization",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/LazyInitStaticField.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unreleased-lock",
          "name" : "java/unreleased-lock",
          "shortDescription" : {
            "text" : "Unreleased lock"
          },
          "fullDescription" : {
            "text" : "A lock that is acquired one or more times without a matching number of unlocks may cause a deadlock."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-764", "external/cwe/cwe-833" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Unreleased lock",
            "description" : "A lock that is acquired one or more times without a matching number of unlocks\n              may cause a deadlock.",
            "id" : "java/unreleased-lock",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/UnreleasedLock.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/unsafe-double-checked-locking",
          "name" : "java/unsafe-double-checked-locking",
          "shortDescription" : {
            "text" : "Double-checked locking is not thread-safe"
          },
          "fullDescription" : {
            "text" : "A repeated check on a non-volatile field is not thread-safe, and could result in unexpected behavior."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-609" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Double-checked locking is not thread-safe",
            "description" : "A repeated check on a non-volatile field is not thread-safe, and\n              could result in unexpected behavior.",
            "id" : "java/unsafe-double-checked-locking",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/DoubleCheckedLocking.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/unsafe-double-checked-locking-init-order",
          "name" : "java/unsafe-double-checked-locking-init-order",
          "shortDescription" : {
            "text" : "Race condition in double-checked locking object initialization"
          },
          "fullDescription" : {
            "text" : "Performing additional initialization on an object after assignment to a shared variable guarded by double-checked locking is not thread-safe, and could result in unexpected behavior."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-609" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Race condition in double-checked locking object initialization",
            "description" : "Performing additional initialization on an object after\n              assignment to a shared variable guarded by double-checked\n              locking is not thread-safe, and could result in unexpected\n              behavior.",
            "id" : "java/unsafe-double-checked-locking-init-order",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/DoubleCheckedLockingWithInitRace.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/busy-wait",
          "name" : "java/busy-wait",
          "shortDescription" : {
            "text" : "Busy wait"
          },
          "fullDescription" : {
            "text" : "Calling 'Thread.sleep' to control thread interaction is less effective than waiting for a notification and may also result in race conditions. Merely synchronizing over shared variables in a loop to control thread interaction may waste system resources and cause performance problems."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Busy wait",
            "description" : "Calling 'Thread.sleep' to control thread interaction is\n              less effective than waiting for a notification and may also\n              result in race conditions. Merely synchronizing over shared\n              variables in a loop to control thread interaction\n              may waste system resources and cause performance problems.",
            "id" : "java/busy-wait",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/BusyWait.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/wait-on-condition-interface",
          "name" : "java/wait-on-condition-interface",
          "shortDescription" : {
            "text" : "Wait on condition"
          },
          "fullDescription" : {
            "text" : "Calling 'wait' on a 'Condition' interface may result in unexpected behavior and is probably a typographical error."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-662" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Wait on condition",
            "description" : "Calling 'wait' on a 'Condition' interface may result in unexpected behavior and is\n              probably a typographical error.",
            "id" : "java/wait-on-condition-interface",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/CallsToConditionWait.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/sleep-with-lock-held",
          "name" : "java/sleep-with-lock-held",
          "shortDescription" : {
            "text" : "Sleep with lock held"
          },
          "fullDescription" : {
            "text" : "Calling 'Thread.sleep' with a lock held may lead to very poor performance or even deadlock."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-833" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Sleep with lock held",
            "description" : "Calling 'Thread.sleep' with a lock held may lead to very poor\n              performance or even deadlock.",
            "id" : "java/sleep-with-lock-held",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/SleepWithLock.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/wait-with-two-locks",
          "name" : "java/wait-with-two-locks",
          "shortDescription" : {
            "text" : "Wait with two locks held"
          },
          "fullDescription" : {
            "text" : "Calling 'Object.wait' while two locks are held may cause deadlock."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency", "external/cwe/cwe-833" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Wait with two locks held",
            "description" : "Calling 'Object.wait' while two locks are held may cause deadlock.",
            "id" : "java/wait-with-two-locks",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/WaitWithTwoLocks.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/wait-outside-loop",
          "name" : "java/wait-outside-loop",
          "shortDescription" : {
            "text" : "Wait outside loop"
          },
          "fullDescription" : {
            "text" : "Calling 'wait' outside a loop may result in the program continuing before the expected condition is met."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "concurrency" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Wait outside loop",
            "description" : "Calling 'wait' outside a loop may result in the program continuing before the\n              expected condition is met.",
            "id" : "java/wait-outside-loop",
            "query-path" : "/semmlecode-queries/Likely Bugs/Concurrency/WaitOutsideLoop.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/wrong-compareto-signature",
          "name" : "java/wrong-compareto-signature",
          "shortDescription" : {
            "text" : "Overloaded compareTo"
          },
          "fullDescription" : {
            "text" : "Defining 'Comparable.compareTo', where the parameter of 'compareTo' is not of the appropriate type, overloads 'compareTo' instead of overriding it."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Overloaded compareTo",
            "description" : "Defining 'Comparable.compareTo', where the parameter of 'compareTo' is not of the\n              appropriate type, overloads 'compareTo' instead of overriding it.",
            "id" : "java/wrong-compareto-signature",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/CovariantCompareTo.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/wrong-equals-signature",
          "name" : "java/wrong-equals-signature",
          "shortDescription" : {
            "text" : "Overloaded equals"
          },
          "fullDescription" : {
            "text" : "Defining 'Object.equals', where the parameter of 'equals' is not of the appropriate type, overloads 'equals' instead of overriding it."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Overloaded equals",
            "description" : "Defining 'Object.equals', where the parameter of 'equals' is not of the\n              appropriate type, overloads 'equals' instead of overriding it.",
            "id" : "java/wrong-equals-signature",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/CovariantEquals.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/equals-on-arrays",
          "name" : "java/equals-on-arrays",
          "shortDescription" : {
            "text" : "Equals or hashCode on arrays"
          },
          "fullDescription" : {
            "text" : "The 'equals' and 'hashCode' methods on arrays only consider object identity, not array contents, which is unlikely to be what is intended."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Equals or hashCode on arrays",
            "description" : "The 'equals' and 'hashCode' methods on arrays only consider object identity, not\n              array contents, which is unlikely to be what is intended.",
            "id" : "java/equals-on-arrays",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/EqualsArray.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/instanceof-in-equals",
          "name" : "java/instanceof-in-equals",
          "shortDescription" : {
            "text" : "Possible inconsistency due to instanceof in equals"
          },
          "fullDescription" : {
            "text" : "Implementations of 'equals' that use 'instanceof' to test the type of the argument and are further overridden in a subclass are likely to violate the 'equals' contract."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Possible inconsistency due to instanceof in equals",
            "description" : "Implementations of 'equals' that use 'instanceof'\n              to test the type of the argument and are further overridden in a subclass\n              are likely to violate the 'equals' contract.",
            "id" : "java/instanceof-in-equals",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/EqualsUsesInstanceOf.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/hashing-without-hashcode",
          "name" : "java/hashing-without-hashcode",
          "shortDescription" : {
            "text" : "Hashed value without hashCode definition"
          },
          "fullDescription" : {
            "text" : "Classes that define an 'equals' method but no 'hashCode' method, and whose instances are stored in a hashing data structure, can lead to unexpected results."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Hashed value without hashCode definition",
            "description" : "Classes that define an 'equals' method but no 'hashCode' method, and whose instances\n              are stored in a hashing data structure, can lead to unexpected results.",
            "id" : "java/hashing-without-hashcode",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/HashedButNoHash.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/equals-on-unrelated-types",
          "name" : "java/equals-on-unrelated-types",
          "shortDescription" : {
            "text" : "Equals on incomparable types"
          },
          "fullDescription" : {
            "text" : "Calls of the form 'x.equals(y)', where the types of 'x' and 'y' are incomparable, should always return 'false'."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Equals on incomparable types",
            "description" : "Calls of the form 'x.equals(y)', where the types of 'x' and 'y' are incomparable,\n              should always return 'false'.",
            "id" : "java/equals-on-unrelated-types",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/IncomparableEquals.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/inconsistent-compareto-and-equals",
          "name" : "java/inconsistent-compareto-and-equals",
          "shortDescription" : {
            "text" : "Inconsistent compareTo"
          },
          "fullDescription" : {
            "text" : "If a class overrides 'compareTo' but not 'equals', it may mean that 'compareTo' and 'equals' are inconsistent."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Inconsistent compareTo",
            "description" : "If a class overrides 'compareTo' but not 'equals', it may mean that 'compareTo'\n              and 'equals' are inconsistent.",
            "id" : "java/inconsistent-compareto-and-equals",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/InconsistentCompareTo.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/inconsistent-equals-and-hashcode",
          "name" : "java/inconsistent-equals-and-hashcode",
          "shortDescription" : {
            "text" : "Inconsistent equals and hashCode"
          },
          "fullDescription" : {
            "text" : "If a class overrides only one of 'equals' and 'hashCode', it may mean that 'equals' and 'hashCode' are inconsistent."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-581" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Inconsistent equals and hashCode",
            "description" : "If a class overrides only one of 'equals' and 'hashCode', it may mean that\n              'equals' and 'hashCode' are inconsistent.",
            "id" : "java/inconsistent-equals-and-hashcode",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/InconsistentEqualsHashCode.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/unchecked-cast-in-equals",
          "name" : "java/unchecked-cast-in-equals",
          "shortDescription" : {
            "text" : "Equals method does not inspect argument type"
          },
          "fullDescription" : {
            "text" : "An implementation of 'equals' that does not check the type of its argument may lead to failing casts."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Equals method does not inspect argument type",
            "description" : "An implementation of 'equals' that does not check the type\n              of its argument may lead to failing casts.",
            "id" : "java/unchecked-cast-in-equals",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/MissingInstanceofInEquals.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/reference-equality-with-object",
          "name" : "java/reference-equality-with-object",
          "shortDescription" : {
            "text" : "Reference equality test on java.lang.Object"
          },
          "fullDescription" : {
            "text" : "Reference comparisons (== or !=) with operands where the static type is 'Object' may not work as intended."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-595" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Reference equality test on java.lang.Object",
            "description" : "Reference comparisons (== or !=) with operands where the static type is 'Object' may\n              not work as intended.",
            "id" : "java/reference-equality-with-object",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/ObjectComparison.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/reference-equality-of-boxed-types",
          "name" : "java/reference-equality-of-boxed-types",
          "shortDescription" : {
            "text" : "Reference equality test of boxed types"
          },
          "fullDescription" : {
            "text" : "Comparing two boxed primitive values using the == or != operator compares object identity, which may not be intended."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-595" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Reference equality test of boxed types",
            "description" : "Comparing two boxed primitive values using the == or != operator\n              compares object identity, which may not be intended.",
            "id" : "java/reference-equality-of-boxed-types",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/RefEqBoxed.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/reference-equality-on-strings",
          "name" : "java/reference-equality-on-strings",
          "shortDescription" : {
            "text" : "Reference equality test on strings"
          },
          "fullDescription" : {
            "text" : "Comparing two strings using the == or != operator compares object identity, which may not be intended."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "external/cwe/cwe-597" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Reference equality test on strings",
            "description" : "Comparing two strings using the == or != operator\n              compares object identity, which may not be intended.",
            "id" : "java/reference-equality-on-strings",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/StringComparison.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/inherited-equals-with-added-fields",
          "name" : "java/inherited-equals-with-added-fields",
          "shortDescription" : {
            "text" : "Inherited equals() in subclass with added fields"
          },
          "fullDescription" : {
            "text" : "If a class overrides 'Object.equals', and a subclass defines additional fields to those it inherits but does not re-define 'equals', the results of 'equals' may be wrong."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Inherited equals() in subclass with added fields",
            "description" : "If a class overrides 'Object.equals', and a subclass defines additional fields\n              to those it inherits but does not re-define 'equals', the results of 'equals'\n              may be wrong.",
            "id" : "java/inherited-equals-with-added-fields",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/DefineEqualsWhenAddingFields.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/comparison-with-nan",
          "name" : "java/comparison-with-nan",
          "shortDescription" : {
            "text" : "Wrong NaN comparison"
          },
          "fullDescription" : {
            "text" : "A comparison with 'NaN' using '==' or '!=' will always yield the same result and is unlikely to be intended."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Wrong NaN comparison",
            "description" : "A comparison with 'NaN' using '==' or '!=' will always yield the same result\n              and is unlikely to be intended.",
            "id" : "java/comparison-with-nan",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/WrongNanComparison.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/abnormal-finally-completion",
          "name" : "java/abnormal-finally-completion",
          "shortDescription" : {
            "text" : "Finally block may not complete normally"
          },
          "fullDescription" : {
            "text" : "A 'finally' block that runs because an exception has been thrown, and that does not complete normally, causes the exception to disappear silently."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions", "external/cwe/cwe-584" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Finally block may not complete normally",
            "description" : "A 'finally' block that runs because an exception has been thrown, and that does not\n              complete normally, causes the exception to disappear silently.",
            "id" : "java/abnormal-finally-completion",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/legacy/FinallyMayNotComplete.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/dereferenced-value-is-always-null",
          "name" : "java/dereferenced-value-is-always-null",
          "shortDescription" : {
            "text" : "Dereferenced variable is always null"
          },
          "fullDescription" : {
            "text" : "Dereferencing a variable whose value is 'null' causes a 'NullPointerException'."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions", "external/cwe/cwe-476" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Dereferenced variable is always null",
            "description" : "Dereferencing a variable whose value is 'null' causes a 'NullPointerException'.",
            "id" : "java/dereferenced-value-is-always-null",
            "query-path" : "/semmlecode-queries/Likely Bugs/Nullness/NullAlways.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/dereferenced-value-may-be-null",
          "name" : "java/dereferenced-value-may-be-null",
          "shortDescription" : {
            "text" : "Dereferenced variable may be null"
          },
          "fullDescription" : {
            "text" : "Dereferencing a variable whose value may be 'null' may cause a 'NullPointerException'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions", "external/cwe/cwe-476", "non-local" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Dereferenced variable may be null",
            "description" : "Dereferencing a variable whose value may be 'null' may cause a\n              'NullPointerException'.",
            "id" : "java/dereferenced-value-may-be-null",
            "query-path" : "/semmlecode-queries/Likely Bugs/Nullness/NullMaybe.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unreachable-catch-clause",
          "name" : "java/unreachable-catch-clause",
          "shortDescription" : {
            "text" : "Unreachable catch clause"
          },
          "fullDescription" : {
            "text" : "An unreachable 'catch' clause may indicate a mistake in exception handling or may be unnecessary."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Unreachable catch clause",
            "description" : "An unreachable 'catch' clause may indicate a mistake in exception handling or may\n              be unnecessary.",
            "id" : "java/unreachable-catch-clause",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/PartiallyMaskedCatch.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/discarded-exception",
          "name" : "java/discarded-exception",
          "shortDescription" : {
            "text" : "Discarded exception"
          },
          "fullDescription" : {
            "text" : "Dropping an exception may allow an unusual program state to continue without recovery."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions", "external/cwe/cwe-391" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Discarded exception",
            "description" : "Dropping an exception may allow an unusual program state to continue\n              without recovery.",
            "id" : "java/discarded-exception",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Exception Handling/DroppedExceptions.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/missing-format-argument",
          "name" : "java/missing-format-argument",
          "shortDescription" : {
            "text" : "Missing format argument"
          },
          "fullDescription" : {
            "text" : "A format call with an insufficient number of arguments causes an 'IllegalFormatException'."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness", "external/cwe/cwe-685" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Missing format argument",
            "description" : "A format call with an insufficient number of arguments causes\n              an 'IllegalFormatException'.",
            "id" : "java/missing-format-argument",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/MissingFormatArg.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/index-out-of-bounds",
          "name" : "java/index-out-of-bounds",
          "shortDescription" : {
            "text" : "Array index out of bounds"
          },
          "fullDescription" : {
            "text" : "Accessing an array with an index that is greater than or equal to the length of the array causes an 'ArrayIndexOutOfBoundsException'."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Array index out of bounds",
            "description" : "Accessing an array with an index that is greater than or equal to the\n              length of the array causes an 'ArrayIndexOutOfBoundsException'.",
            "id" : "java/index-out-of-bounds",
            "query-path" : "/semmlecode-queries/Likely Bugs/Collections/ArrayIndexOutOfBounds.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/dereferenced-expr-may-be-null",
          "name" : "java/dereferenced-expr-may-be-null",
          "shortDescription" : {
            "text" : "Dereferenced expression may be null"
          },
          "fullDescription" : {
            "text" : "Dereferencing an expression whose value may be 'null' may cause a 'NullPointerException'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "exceptions", "external/cwe/cwe-476" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Dereferenced expression may be null",
            "description" : "Dereferencing an expression whose value may be 'null' may cause a\n              'NullPointerException'.",
            "id" : "java/dereferenced-expr-may-be-null",
            "query-path" : "/semmlecode-queries/Likely Bugs/Nullness/NullExprDeref.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/uncaught-number-format-exception",
          "name" : "java/uncaught-number-format-exception",
          "shortDescription" : {
            "text" : "Missing catch of NumberFormatException"
          },
          "fullDescription" : {
            "text" : "Calling a string to number conversion method without handling 'NumberFormatException' may cause unexpected runtime exceptions."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "external/cwe/cwe-248" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Missing catch of NumberFormatException",
            "description" : "Calling a string to number conversion method without handling\n              'NumberFormatException' may cause unexpected runtime exceptions.",
            "id" : "java/uncaught-number-format-exception",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Exception Handling/NumberFormatException.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/type-mismatch-access",
          "name" : "java/type-mismatch-access",
          "shortDescription" : {
            "text" : "Type mismatch on container access"
          },
          "fullDescription" : {
            "text" : "Calling container access methods such as 'Collection.contains' or 'Map.get' with an object of a type that is incompatible with the corresponding container element type is unlikely to return 'true'."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Type mismatch on container access",
            "description" : "Calling container access methods such as 'Collection.contains'\n              or 'Map.get' with an object of a type that is incompatible with\n              the corresponding container element type is unlikely to return 'true'.",
            "id" : "java/type-mismatch-access",
            "query-path" : "/semmlecode-queries/Likely Bugs/Collections/ContainsTypeMismatch.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/type-mismatch-modification",
          "name" : "java/type-mismatch-modification",
          "shortDescription" : {
            "text" : "Type mismatch on container modification"
          },
          "fullDescription" : {
            "text" : "Calling container modification methods such as 'Collection.remove' or 'Map.remove' with an object of a type that is incompatible with the corresponding container element type is unlikely to have any effect."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Type mismatch on container modification",
            "description" : "Calling container modification methods such as 'Collection.remove'\n              or 'Map.remove' with an object of a type that is incompatible with\n              the corresponding container element type is unlikely to have any effect.",
            "id" : "java/type-mismatch-modification",
            "query-path" : "/semmlecode-queries/Likely Bugs/Collections/RemoveTypeMismatch.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/nested-loops-with-same-variable",
          "name" : "java/nested-loops-with-same-variable",
          "shortDescription" : {
            "text" : "Nested loops with same variable"
          },
          "fullDescription" : {
            "text" : "Nested loops in which the iteration variable is the same for each loop are difficult to understand."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Nested loops with same variable",
            "description" : "Nested loops in which the iteration variable is the same for each loop are difficult\n              to understand.",
            "id" : "java/nested-loops-with-same-variable",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/NestedLoopsSameVariable.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/test-for-negative-container-size",
          "name" : "java/test-for-negative-container-size",
          "shortDescription" : {
            "text" : "Container size compared to zero"
          },
          "fullDescription" : {
            "text" : "Comparing the size of a container to zero with this operator will always return the same value."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Container size compared to zero",
            "description" : "Comparing the size of a container to zero with this operator will always return the same value.",
            "id" : "java/test-for-negative-container-size",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/ContainerSizeCmpZero.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/contradictory-type-checks",
          "name" : "java/contradictory-type-checks",
          "shortDescription" : {
            "text" : "Contradictory type checks"
          },
          "fullDescription" : {
            "text" : "Contradictory dynamic type checks in `instanceof` expressions and casts may cause dead code or even runtime errors, and usually indicate a logic error."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Contradictory type checks",
            "description" : "Contradictory dynamic type checks in `instanceof` expressions\n              and casts may cause dead code or even runtime errors, and usually\n              indicate a logic error.",
            "id" : "java/contradictory-type-checks",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/ContradictoryTypeChecks.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/ineffective-annotation-present-check",
          "name" : "java/ineffective-annotation-present-check",
          "shortDescription" : {
            "text" : "AnnotationPresent check"
          },
          "fullDescription" : {
            "text" : "If an annotation has not been annotated with a 'RUNTIME' retention policy, checking for its presence at runtime is not possible."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "AnnotationPresent check",
            "description" : "If an annotation has not been annotated with a 'RUNTIME' retention policy, checking\n              for its presence at runtime is not possible.",
            "id" : "java/ineffective-annotation-present-check",
            "query-path" : "/semmlecode-queries/Likely Bugs/Reflection/AnnotationPresentCheck.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/impossible-array-cast",
          "name" : "java/impossible-array-cast",
          "shortDescription" : {
            "text" : "Impossible array cast"
          },
          "fullDescription" : {
            "text" : "Trying to cast an array of a particular type as an array of a subtype causes a 'ClassCastException' at runtime."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic", "external/cwe/cwe-704" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Impossible array cast",
            "description" : "Trying to cast an array of a particular type as an array of a subtype causes a\n              'ClassCastException' at runtime.",
            "id" : "java/impossible-array-cast",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/ImpossibleCast.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/annotation-subtype",
          "name" : "java/annotation-subtype",
          "shortDescription" : {
            "text" : "Annotation is extended or implemented"
          },
          "fullDescription" : {
            "text" : "Extending or implementing an annotation is unlikely to be what the programmer intends."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Annotation is extended or implemented",
            "description" : "Extending or implementing an annotation is unlikely to be what the programmer intends.",
            "id" : "java/annotation-subtype",
            "query-path" : "/semmlecode-queries/Language Abuse/ImplementsAnnotation.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-final-call-in-constructor",
          "name" : "java/non-final-call-in-constructor",
          "shortDescription" : {
            "text" : "Non-final method invocation in constructor"
          },
          "fullDescription" : {
            "text" : "If a constructor calls a method that is overridden in a subclass, the result can be unpredictable."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Non-final method invocation in constructor",
            "description" : "If a constructor calls a method that is overridden in a subclass, the result can be\n              unpredictable.",
            "id" : "java/non-final-call-in-constructor",
            "query-path" : "/semmlecode-queries/Likely Bugs/Inheritance/NoNonFinalInConstructor.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/misleading-indentation",
          "name" : "java/misleading-indentation",
          "shortDescription" : {
            "text" : "Misleading indentation"
          },
          "fullDescription" : {
            "text" : "If a control structure does not use braces, misleading indentation makes it difficult to see which statements are within its scope."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Misleading indentation",
            "description" : "If a control structure does not use braces, misleading indentation makes it\n              difficult to see which statements are within its scope.",
            "id" : "java/misleading-indentation",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/UseBraces.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/comparison-of-identical-expressions",
          "name" : "java/comparison-of-identical-expressions",
          "shortDescription" : {
            "text" : "Comparison of identical values"
          },
          "fullDescription" : {
            "text" : "If the same expression occurs on both sides of a comparison operator, the operator is redundant, and probably indicates a mistake."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Comparison of identical values",
            "description" : "If the same expression occurs on both sides of a comparison\n              operator, the operator is redundant, and probably indicates a mistake.",
            "id" : "java/comparison-of-identical-expressions",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/CompareIdenticalValues.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/redundant-assignment",
          "name" : "java/redundant-assignment",
          "shortDescription" : {
            "text" : "Self assignment"
          },
          "fullDescription" : {
            "text" : "Assigning a variable to itself has no effect."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Self assignment",
            "description" : "Assigning a variable to itself has no effect.",
            "id" : "java/redundant-assignment",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/SelfAssignment.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/iterator-remove-failure",
          "name" : "java/iterator-remove-failure",
          "shortDescription" : {
            "text" : "Call to Iterator.remove may fail"
          },
          "fullDescription" : {
            "text" : "Attempting to invoke 'Iterator.remove' on an iterator over a collection that does not support element removal causes a runtime exception."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "logic" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Call to Iterator.remove may fail",
            "description" : "Attempting to invoke 'Iterator.remove' on an iterator over a collection that does not\n              support element removal causes a runtime exception.",
            "id" : "java/iterator-remove-failure",
            "query-path" : "/semmlecode-queries/Likely Bugs/Collections/IteratorRemoveMayFail.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/constant-comparison",
          "name" : "java/constant-comparison",
          "shortDescription" : {
            "text" : "Useless comparison test"
          },
          "fullDescription" : {
            "text" : "A comparison operation that always evaluates to true or always evaluates to false may indicate faulty logic and may result in dead code."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "correctness", "logic", "external/cwe/cwe-570", "external/cwe/cwe-571" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Useless comparison test",
            "description" : "A comparison operation that always evaluates to true or always\n              evaluates to false may indicate faulty logic and may result in\n              dead code.",
            "id" : "java/constant-comparison",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/UselessComparisonTest.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/constant-loop-condition",
          "name" : "java/constant-loop-condition",
          "shortDescription" : {
            "text" : "Constant loop condition"
          },
          "fullDescription" : {
            "text" : "A loop condition that remains constant throughout the iteration indicates faulty logic and is likely to cause infinite looping."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "correctness", "external/cwe/cwe-835" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Constant loop condition",
            "description" : "A loop condition that remains constant throughout the iteration\n              indicates faulty logic and is likely to cause infinite\n              looping.",
            "id" : "java/constant-loop-condition",
            "query-path" : "/semmlecode-queries/Likely Bugs/Termination/ConstantLoopCondition.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/input-resource-leak",
          "name" : "java/input-resource-leak",
          "shortDescription" : {
            "text" : "Potential input resource leak"
          },
          "fullDescription" : {
            "text" : "A resource that is opened for reading but not closed may cause a resource leak."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "correctness", "resources", "external/cwe/cwe-404", "external/cwe/cwe-772" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Potential input resource leak",
            "description" : "A resource that is opened for reading but not closed may cause a resource\n              leak.",
            "id" : "java/input-resource-leak",
            "query-path" : "/semmlecode-queries/Likely Bugs/Resource Leaks/CloseReader.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/database-resource-leak",
          "name" : "java/database-resource-leak",
          "shortDescription" : {
            "text" : "Potential database resource leak"
          },
          "fullDescription" : {
            "text" : "A database resource that is opened but not closed may cause a resource leak."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "correctness", "resources", "external/cwe/cwe-404", "external/cwe/cwe-772" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Potential database resource leak",
            "description" : "A database resource that is opened but not closed may cause a resource leak.",
            "id" : "java/database-resource-leak",
            "query-path" : "/semmlecode-queries/Likely Bugs/Resource Leaks/CloseSql.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/output-resource-leak",
          "name" : "java/output-resource-leak",
          "shortDescription" : {
            "text" : "Potential output resource leak"
          },
          "fullDescription" : {
            "text" : "A resource that is opened for writing but not closed may cause a resource leak."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "correctness", "resources", "external/cwe/cwe-404", "external/cwe/cwe-772" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Potential output resource leak",
            "description" : "A resource that is opened for writing but not closed may cause a resource\n              leak.",
            "id" : "java/output-resource-leak",
            "query-path" : "/semmlecode-queries/Likely Bugs/Resource Leaks/CloseWriter.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/inconsistent-call-on-result",
          "name" : "java/inconsistent-call-on-result",
          "shortDescription" : {
            "text" : "Inconsistent operation on return value"
          },
          "fullDescription" : {
            "text" : "If the same operation is usually performed on the result of a method call, any cases where it is not performed may indicate resource leaks or other problems."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-252", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Inconsistent operation on return value",
            "description" : "If the same operation is usually performed\n              on the result of a method call, any cases where it\n              is not performed may indicate resource leaks or other problems.",
            "id" : "java/inconsistent-call-on-result",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/InconsistentCallOnResult.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/return-value-ignored",
          "name" : "java/return-value-ignored",
          "shortDescription" : {
            "text" : "Method result ignored"
          },
          "fullDescription" : {
            "text" : "If most of the calls to a method use the return value of that method, the calls that do not check the return value may be mistakes."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-252", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Method result ignored",
            "description" : "If most of the calls to a method use the return value\n              of that method, the calls that do not check the return value may be mistakes.",
            "id" : "java/return-value-ignored",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/ReturnValueIgnored.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/ignored-error-status-of-call",
          "name" : "java/ignored-error-status-of-call",
          "shortDescription" : {
            "text" : "Ignored error status of call"
          },
          "fullDescription" : {
            "text" : "Ignoring an exceptional value that is returned by a method may cause subsequent code to fail."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-391" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Ignored error status of call",
            "description" : "Ignoring an exceptional value that is returned by a method may cause subsequent\n              code to fail.",
            "id" : "java/ignored-error-status-of-call",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Exception Handling/IgnoreExceptionalReturn.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/iterator-hasnext-calls-next",
          "name" : "java/iterator-hasnext-calls-next",
          "shortDescription" : {
            "text" : "Next in hasNext implementation"
          },
          "fullDescription" : {
            "text" : "Iterator implementations whose 'hasNext' method calls 'next' are most likely incorrect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Next in hasNext implementation",
            "description" : "Iterator implementations whose 'hasNext' method calls 'next' are most likely\n              incorrect.",
            "id" : "java/iterator-hasnext-calls-next",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/NextFromIterator.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/missing-call-to-super-clone",
          "name" : "java/missing-call-to-super-clone",
          "shortDescription" : {
            "text" : "Missing super clone"
          },
          "fullDescription" : {
            "text" : "A 'clone' method that is overridden in a subclass, and that does not itself call 'super.clone', causes calls to the subclass's 'clone' method to return an object of the wrong type."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-580" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Missing super clone",
            "description" : "A 'clone' method that is overridden in a subclass, and that does not itself call\n              'super.clone', causes calls to the subclass's 'clone' method to return an object of\n              the wrong type.",
            "id" : "java/missing-call-to-super-clone",
            "query-path" : "/semmlecode-queries/Likely Bugs/Cloning/MissingCallToSuperClone.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/missing-clone-method",
          "name" : "java/missing-clone-method",
          "shortDescription" : {
            "text" : "No clone method"
          },
          "fullDescription" : {
            "text" : "A class that implements 'Cloneable' but does not override the 'clone' method will have undesired behavior."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "No clone method",
            "description" : "A class that implements 'Cloneable' but does not override the 'clone' method will\n              have undesired behavior.",
            "id" : "java/missing-clone-method",
            "query-path" : "/semmlecode-queries/Likely Bugs/Cloning/MissingMethodClone.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/missing-super-finalize",
          "name" : "java/missing-super-finalize",
          "shortDescription" : {
            "text" : "Finalizer inconsistency"
          },
          "fullDescription" : {
            "text" : "A 'finalize' method that does not call 'super.finalize' may leave cleanup actions undone."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-568" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Finalizer inconsistency",
            "description" : "A 'finalize' method that does not call 'super.finalize' may leave\n              cleanup actions undone.",
            "id" : "java/missing-super-finalize",
            "query-path" : "/semmlecode-queries/Likely Bugs/Finalization/NullifiedSuperFinalize.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/finalizer-nulls-fields",
          "name" : "java/finalizer-nulls-fields",
          "shortDescription" : {
            "text" : "Finalizer nulls fields"
          },
          "fullDescription" : {
            "text" : "Setting fields to 'null' in a finalizer does not cause the object to be collected by the garbage collector any earlier, and may adversely affect performance."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Finalizer nulls fields",
            "description" : "Setting fields to 'null' in a finalizer does not cause the object to be collected\n              by the garbage collector any earlier, and may adversely affect performance.",
            "id" : "java/finalizer-nulls-fields",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/FinalizerNullsFields.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/run-finalizers-on-exit",
          "name" : "java/run-finalizers-on-exit",
          "shortDescription" : {
            "text" : "Dangerous runFinalizersOnExit"
          },
          "fullDescription" : {
            "text" : "Calling 'System.runFinalizersOnExit' or 'Runtime.runFinalizersOnExit' may cause finalizers to be run on live objects, leading to erratic behavior or deadlock."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Dangerous runFinalizersOnExit",
            "description" : "Calling 'System.runFinalizersOnExit' or 'Runtime.runFinalizersOnExit'\n              may cause finalizers to be run on live objects, leading to erratic behavior or\n              deadlock.",
            "id" : "java/run-finalizers-on-exit",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/CallsToRunFinalizersOnExit.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/garbage-collection",
          "name" : "java/garbage-collection",
          "shortDescription" : {
            "text" : "Explicit garbage collection"
          },
          "fullDescription" : {
            "text" : "Triggering garbage collection explicitly may either have no effect or may trigger unnecessary garbage collection."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Explicit garbage collection",
            "description" : "Triggering garbage collection explicitly may either have no effect or may trigger\n              unnecessary garbage collection.",
            "id" : "java/garbage-collection",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/GarbageCollection.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/wrong-object-serialization-signature",
          "name" : "java/wrong-object-serialization-signature",
          "shortDescription" : {
            "text" : "Serialization methods do not match required signature"
          },
          "fullDescription" : {
            "text" : "A serialized class that implements 'readObject' or 'writeObject' but does not use the correct signatures causes the default serialization mechanism to be used."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Serialization methods do not match required signature",
            "description" : "A serialized class that implements 'readObject' or 'writeObject' but does not use\n              the correct signatures causes the default serialization mechanism to be used.",
            "id" : "java/wrong-object-serialization-signature",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/IncorrectSerializableMethods.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/incorrect-serial-version-uid",
          "name" : "java/incorrect-serial-version-uid",
          "shortDescription" : {
            "text" : "Incorrect serialVersionUID field"
          },
          "fullDescription" : {
            "text" : "A 'serialVersionUID' field that is declared in a serializable class but is of the wrong type cannot be used by the serialization framework."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Incorrect serialVersionUID field",
            "description" : "A 'serialVersionUID' field that is declared in a serializable class but is of the\n              wrong type cannot be used by the serialization framework.",
            "id" : "java/incorrect-serial-version-uid",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/IncorrectSerialVersionUID.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/missing-no-arg-constructor-on-externalizable",
          "name" : "java/missing-no-arg-constructor-on-externalizable",
          "shortDescription" : {
            "text" : "Externalizable but no public no-argument constructor"
          },
          "fullDescription" : {
            "text" : "A class that implements 'Externalizable' but does not have a public no-argument constructor causes an 'InvalidClassException' to be thrown."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Externalizable but no public no-argument constructor",
            "description" : "A class that implements 'Externalizable' but does not have a public no-argument\n              constructor causes an 'InvalidClassException' to be thrown.",
            "id" : "java/missing-no-arg-constructor-on-externalizable",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/MissingVoidConstructorOnExternalizable.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/missing-no-arg-constructor-on-serializable",
          "name" : "java/missing-no-arg-constructor-on-serializable",
          "shortDescription" : {
            "text" : "Serializable but no void constructor"
          },
          "fullDescription" : {
            "text" : "A non-serializable, immediate superclass of a serializable class that does not itself declare an accessible, no-argument constructor causes deserialization to fail."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Serializable but no void constructor",
            "description" : "A non-serializable, immediate superclass of a serializable class that does not\n              itself declare an accessible, no-argument constructor causes deserialization to\n              fail.",
            "id" : "java/missing-no-arg-constructor-on-serializable",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/MissingVoidConstructorsOnSerializable.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-serializable-comparator",
          "name" : "java/non-serializable-comparator",
          "shortDescription" : {
            "text" : "Non-serializable comparator"
          },
          "fullDescription" : {
            "text" : "A comparator that is passed to an ordered collection (for example, a treemap) must be serializable, otherwise the collection fails to serialize at run-time."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Non-serializable comparator",
            "description" : "A comparator that is passed to an ordered collection (for example, a treemap) must be\n              serializable, otherwise the collection fails to serialize at run-time.",
            "id" : "java/non-serializable-comparator",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/NonSerializableComparator.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-serializable-field",
          "name" : "java/non-serializable-field",
          "shortDescription" : {
            "text" : "Non-serializable field"
          },
          "fullDescription" : {
            "text" : "A non-transient field in a serializable class must also be serializable otherwise it causes the class to fail to serialize with a 'NotSerializableException'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Non-serializable field",
            "description" : "A non-transient field in a serializable class must also be serializable\n              otherwise it causes the class to fail to serialize with a 'NotSerializableException'.",
            "id" : "java/non-serializable-field",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/NonSerializableField.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-serializable-inner-class",
          "name" : "java/non-serializable-inner-class",
          "shortDescription" : {
            "text" : "Serializable inner class of non-serializable class"
          },
          "fullDescription" : {
            "text" : "A class that is serializable with an enclosing class that is not serializable causes serialization to fail."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Serializable inner class of non-serializable class",
            "description" : "A class that is serializable with an enclosing class that is not serializable\n              causes serialization to fail.",
            "id" : "java/non-serializable-inner-class",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/NonSerializableInnerClass.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/wrong-readresolve-signature",
          "name" : "java/wrong-readresolve-signature",
          "shortDescription" : {
            "text" : "ReadResolve must have Object return type, not void"
          },
          "fullDescription" : {
            "text" : "An implementation of 'readResolve' that does not have the signature that is expected by the Java serialization framework is not recognized by the serialization mechanism."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "ReadResolve must have Object return type, not void",
            "description" : "An implementation of 'readResolve' that does not have the signature that is expected\n              by the Java serialization framework is not recognized by the serialization\n              mechanism.",
            "id" : "java/wrong-readresolve-signature",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/ReadResolveObject.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/transient-not-serializable",
          "name" : "java/transient-not-serializable",
          "shortDescription" : {
            "text" : "Transient field in non-serializable class"
          },
          "fullDescription" : {
            "text" : "Using the 'transient' field modifier in non-serializable classes has no effect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Transient field in non-serializable class",
            "description" : "Using the 'transient' field modifier in non-serializable classes has no effect.",
            "id" : "java/transient-not-serializable",
            "query-path" : "/semmlecode-queries/Likely Bugs/Serialization/TransientNotSerializable.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/wrong-junit-suite-signature",
          "name" : "java/wrong-junit-suite-signature",
          "shortDescription" : {
            "text" : "Bad suite method"
          },
          "fullDescription" : {
            "text" : "A 'suite' method in a JUnit 3.8 test that does not match the expected signature is not detected by JUnit."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "frameworks/junit" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Bad suite method",
            "description" : "A 'suite' method in a JUnit 3.8 test that does not match the expected signature is not\n              detected by JUnit.",
            "id" : "java/wrong-junit-suite-signature",
            "query-path" : "/semmlecode-queries/Likely Bugs/Frameworks/JUnit/BadSuiteMethod.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/junit-teardown-without-super",
          "name" : "java/junit-teardown-without-super",
          "shortDescription" : {
            "text" : "TestCase implements tearDown but doesn't call super.tearDown()"
          },
          "fullDescription" : {
            "text" : "A JUnit 3.8 test method that overrides 'tearDown' but does not call 'super.tearDown' may result in subsequent tests failing, or allow the current state to persist and affect subsequent tests."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "frameworks/junit" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "TestCase implements tearDown but doesn't call super.tearDown()",
            "description" : "A JUnit 3.8 test method that overrides 'tearDown' but does not call 'super.tearDown'\n              may result in subsequent tests failing, or allow the current state to persist and\n              affect subsequent tests.",
            "id" : "java/junit-teardown-without-super",
            "query-path" : "/semmlecode-queries/Likely Bugs/Frameworks/JUnit/TearDownNoSuper.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/test-case-without-tests",
          "name" : "java/test-case-without-tests",
          "shortDescription" : {
            "text" : "Test case has no tests"
          },
          "fullDescription" : {
            "text" : "A test case class whose test methods are not recognized by JUnit 3.8 as valid declarations is not used."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "frameworks/junit" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Test case has no tests",
            "description" : "A test case class whose test methods are not recognized by JUnit 3.8 as valid\n              declarations is not used.",
            "id" : "java/test-case-without-tests",
            "query-path" : "/semmlecode-queries/Likely Bugs/Frameworks/JUnit/TestCaseNoTests.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/abs-of-random",
          "name" : "java/abs-of-random",
          "shortDescription" : {
            "text" : "Incorrect absolute value of random number"
          },
          "fullDescription" : {
            "text" : "Calling 'Math.abs' to find the absolute value of a randomly generated integer is not guaranteed to return a non-negative integer."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Incorrect absolute value of random number",
            "description" : "Calling 'Math.abs' to find the absolute value of a randomly generated integer is not\n              guaranteed to return a non-negative integer.",
            "id" : "java/abs-of-random",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/BadAbsOfRandom.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/random-used-once",
          "name" : "java/random-used-once",
          "shortDescription" : {
            "text" : "Random used only once"
          },
          "fullDescription" : {
            "text" : "Creating an instance of 'Random' for each pseudo-random number required does not guarantee an evenly distributed sequence of random numbers."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-335" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Random used only once",
            "description" : "Creating an instance of 'Random' for each pseudo-random number required does not\n              guarantee an evenly distributed sequence of random numbers.",
            "id" : "java/random-used-once",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/RandomUsedOnce.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/spring/missing-parent-bean",
          "name" : "java/spring/missing-parent-bean",
          "shortDescription" : {
            "text" : "Beans sharing similar properties"
          },
          "fullDescription" : {
            "text" : "Beans that share similar properties exhibit unnecessary repetition in the bean definitions and make the system's architecture more difficult to see."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Beans sharing similar properties",
            "description" : "Beans that share similar properties exhibit unnecessary repetition in the bean\n              definitions and make the system's architecture more difficult to see.",
            "id" : "java/spring/missing-parent-bean",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Architecture/Refactoring Opportunities/MissingParentBean.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/too-many-beans",
          "name" : "java/spring/too-many-beans",
          "shortDescription" : {
            "text" : "Too many beans in file"
          },
          "fullDescription" : {
            "text" : "Too many beans in a file can make the file difficult to understand and maintain."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Too many beans in file",
            "description" : "Too many beans in a file can make the file difficult to understand and maintain.",
            "id" : "java/spring/too-many-beans",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Architecture/Refactoring Opportunities/TooManyBeans.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/useless-property-override",
          "name" : "java/spring/useless-property-override",
          "shortDescription" : {
            "text" : "Useless property override"
          },
          "fullDescription" : {
            "text" : "A bean property that overrides the same property in a parent bean, and has the same contents, is useless."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Useless property override",
            "description" : "A bean property that overrides the same property in a parent bean, and has the same\n              contents, is useless.",
            "id" : "java/spring/useless-property-override",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Architecture/Refactoring Opportunities/UselessPropertyOverride.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/spring/unused-bean",
          "name" : "java/spring/unused-bean",
          "shortDescription" : {
            "text" : "Beans that are never used within the code"
          },
          "fullDescription" : {
            "text" : "Beans that are specified but never used are redundant and should be removed."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Beans that are never used within the code",
            "description" : "Beans that are specified but never used are redundant and should be removed.",
            "id" : "java/spring/unused-bean",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Architecture/Refactoring Opportunities/UnusedBean.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/autowiring",
          "name" : "java/spring/autowiring",
          "shortDescription" : {
            "text" : "Avoid autowiring"
          },
          "fullDescription" : {
            "text" : "Using autowiring in Spring beans may make it difficult to maintain large projects."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Avoid autowiring",
            "description" : "Using autowiring in Spring beans may make it difficult to maintain large projects.",
            "id" : "java/spring/autowiring",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/AvoidAutowiring.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/constructor-arg-index",
          "name" : "java/spring/constructor-arg-index",
          "shortDescription" : {
            "text" : "Use constructor-arg types instead of index"
          },
          "fullDescription" : {
            "text" : "Using a type name instead of an index number in a Spring 'constructor-arg' element improves readability."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Use constructor-arg types instead of index",
            "description" : "Using a type name instead of an index number in a Spring 'constructor-arg' element\n              improves readability.",
            "id" : "java/spring/constructor-arg-index",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/DontUseConstructorArgIndex.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/import-location",
          "name" : "java/spring/import-location",
          "shortDescription" : {
            "text" : "Imports should come before bean definitions"
          },
          "fullDescription" : {
            "text" : "Putting 'import' statements before bean definitions in a Spring bean configuration file makes it easier to immediately see all the file's dependencies."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Imports should come before bean definitions",
            "description" : "Putting 'import' statements before bean definitions in a Spring bean configuration\n              file makes it easier to immediately see all the file's dependencies.",
            "id" : "java/spring/import-location",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/ImportsFirst.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/parent-bean-abstract-class",
          "name" : "java/spring/parent-bean-abstract-class",
          "shortDescription" : {
            "text" : "Non-abstract parent beans should not use an abstract class"
          },
          "fullDescription" : {
            "text" : "A non-abstract Spring bean that is a parent of other beans and specifies an abstract class causes an error during bean instantiation."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Non-abstract parent beans should not use an abstract class",
            "description" : "A non-abstract Spring bean that is a parent of other beans and specifies an\n              abstract class causes an error during bean instantiation.",
            "id" : "java/spring/parent-bean-abstract-class",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/ParentShouldNotUseAbstractClass.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/spring/bean-id",
          "name" : "java/spring/bean-id",
          "shortDescription" : {
            "text" : "Use id instead of name"
          },
          "fullDescription" : {
            "text" : "Using 'id' instead of 'name' to name a Spring bean enables the XML parser to perform additional checks."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Use id instead of name",
            "description" : "Using 'id' instead of 'name' to name a Spring bean enables the XML parser to perform\n              additional checks.",
            "id" : "java/spring/bean-id",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/UseIdInsteadOfName.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/non-local-reference",
          "name" : "java/spring/non-local-reference",
          "shortDescription" : {
            "text" : "Use local refs when referring to beans in the same file"
          },
          "fullDescription" : {
            "text" : "Using local references when referring to Spring beans in the same file allows reference errors to be detected during XML parsing."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Use local refs when referring to beans in the same file",
            "description" : "Using local references when referring to Spring beans in the same file allows\n              reference errors to be detected during XML parsing.",
            "id" : "java/spring/non-local-reference",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/UseLocalRef.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/constructor-injection",
          "name" : "java/spring/constructor-injection",
          "shortDescription" : {
            "text" : "Use setter injection instead of constructor injection"
          },
          "fullDescription" : {
            "text" : "When using the Spring Framework, using setter injection instead of constructor injection is more flexible, especially when several properties are optional."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Use setter injection instead of constructor injection",
            "description" : "When using the Spring Framework, using setter injection instead of constructor\n              injection is more flexible, especially when several properties are optional.",
            "id" : "java/spring/constructor-injection",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/UseSetterInjection.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/non-shortcut-form",
          "name" : "java/spring/non-shortcut-form",
          "shortDescription" : {
            "text" : "Use shortcut forms for values"
          },
          "fullDescription" : {
            "text" : "Using shortcut forms may make a Spring XML configuration file less cluttered."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Use shortcut forms for values",
            "description" : "Using shortcut forms may make a Spring XML configuration file less cluttered.",
            "id" : "java/spring/non-shortcut-form",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/Violations of Best Practice/UseShortcutForms.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/spring/missing-setter",
          "name" : "java/spring/missing-setter",
          "shortDescription" : {
            "text" : "Missing setters for property dependency injection"
          },
          "fullDescription" : {
            "text" : "Not declaring a setter for a property that is defined in a Spring XML file causes a compilation error."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "frameworks/spring" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Missing setters for property dependency injection",
            "description" : "Not declaring a setter for a property that is defined in a Spring XML file causes a\n              compilation error.",
            "id" : "java/spring/missing-setter",
            "query-path" : "/semmlecode-queries/Frameworks/Spring/XML Configuration Errors/MissingSetters.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/missing-locale-argument",
          "name" : "java/missing-locale-argument",
          "shortDescription" : {
            "text" : "Missing Locale parameter to toUpperCase() or toLowerCase()"
          },
          "fullDescription" : {
            "text" : "Calling 'String.toUpperCase()' or 'String.toLowerCase()' without specifying the locale may cause unexpected results for certain default locales."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Missing Locale parameter to toUpperCase() or toLowerCase()",
            "description" : "Calling 'String.toUpperCase()' or 'String.toLowerCase()' without specifying the\n              locale may cause unexpected results for certain default locales.",
            "id" : "java/missing-locale-argument",
            "query-path" : "/semmlecode-queries/Likely Bugs/I18N/MissingLocaleArgument.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/useless-tostring-call",
          "name" : "java/useless-tostring-call",
          "shortDescription" : {
            "text" : "Useless toString on String"
          },
          "fullDescription" : {
            "text" : "Calling 'toString' on a string is redundant."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Useless toString on String",
            "description" : "Calling 'toString' on a string is redundant.",
            "id" : "java/useless-tostring-call",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/CallsToStringToString.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/call-to-object-tostring",
          "name" : "java/call-to-object-tostring",
          "shortDescription" : {
            "text" : "Use of default toString()"
          },
          "fullDescription" : {
            "text" : "Calling the default implementation of 'toString' returns a value that is unlikely to be what you expect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Use of default toString()",
            "description" : "Calling the default implementation of 'toString' returns a value that is unlikely to\n              be what you expect.",
            "id" : "java/call-to-object-tostring",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/DefaultToString.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/print-array",
          "name" : "java/print-array",
          "shortDescription" : {
            "text" : "Implicit conversion from array to string"
          },
          "fullDescription" : {
            "text" : "Directly printing an array, without first converting the array to a string, produces unreadable results."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Implicit conversion from array to string",
            "description" : "Directly printing an array, without first converting the array to a string,\n              produces unreadable results.",
            "id" : "java/print-array",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/PrintLnArray.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/string-buffer-char-init",
          "name" : "java/string-buffer-char-init",
          "shortDescription" : {
            "text" : "Character passed to StringBuffer or StringBuilder constructor"
          },
          "fullDescription" : {
            "text" : "A character value is passed to the constructor of 'StringBuffer' or 'StringBuilder'. This value will be converted to an integer and interpreted as the buffer's initial capacity, which is probably not intended."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Character passed to StringBuffer or StringBuilder constructor",
            "description" : "A character value is passed to the constructor of 'StringBuffer' or 'StringBuilder'. This value will\n              be converted to an integer and interpreted as the buffer's initial capacity, which is probably not intended.",
            "id" : "java/string-buffer-char-init",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/StringBufferCharInit.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/wrong-swing-event-adapter-signature",
          "name" : "java/wrong-swing-event-adapter-signature",
          "shortDescription" : {
            "text" : "Bad implementation of an event Adapter"
          },
          "fullDescription" : {
            "text" : "In a class that extends a Swing or Abstract Window Toolkit event adapter, an event handler that does not have exactly the same name as the event handler that it overrides means that the overridden event handler is not called."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "frameworks/swing" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Bad implementation of an event Adapter",
            "description" : "In a class that extends a Swing or Abstract Window Toolkit event adapter, an\n              event handler that does not have exactly the same name as the event handler that it\n              overrides means that the overridden event handler is not called.",
            "id" : "java/wrong-swing-event-adapter-signature",
            "query-path" : "/semmlecode-queries/Likely Bugs/Frameworks/Swing/BadlyOverriddenAdapter.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/swing-thread-safety",
          "name" : "java/swing-thread-safety",
          "shortDescription" : {
            "text" : "Thread safety"
          },
          "fullDescription" : {
            "text" : "Calling Swing methods from a thread other than the event-dispatching thread may result in multi-threading errors."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "frameworks/swing" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Thread safety",
            "description" : "Calling Swing methods from a thread other than the event-dispatching thread may\n              result in multi-threading errors.",
            "id" : "java/swing-thread-safety",
            "query-path" : "/semmlecode-queries/Likely Bugs/Frameworks/Swing/ThreadSafety.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/feature-envy",
          "name" : "java/feature-envy",
          "shortDescription" : {
            "text" : "Feature envy"
          },
          "fullDescription" : {
            "text" : "A method that uses more methods or variables from another (unrelated) class than from its own class violates the principle of putting data and behavior in the same place."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "modularity" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Feature envy",
            "description" : "A method that uses more methods or variables from another (unrelated) class than\n              from its own class violates the principle of putting data and behavior in the same\n              place.",
            "id" : "java/feature-envy",
            "query-path" : "/semmlecode-queries/Architecture/Refactoring Opportunities/FeatureEnvy.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/hub-class",
          "name" : "java/hub-class",
          "shortDescription" : {
            "text" : "Hub classes"
          },
          "fullDescription" : {
            "text" : "Hub classes, which are classes that use, and are used by, many other classes, are complex and difficult to change without affecting the rest of the system."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "modularity" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Hub classes",
            "description" : "Hub classes, which are classes that use, and are used by, many other classes, are\n              complex and difficult to change without affecting the rest of the system.",
            "id" : "java/hub-class",
            "query-path" : "/semmlecode-queries/Architecture/Refactoring Opportunities/HubClasses.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/coupled-types",
          "name" : "java/coupled-types",
          "shortDescription" : {
            "text" : "Inappropriate Intimacy"
          },
          "fullDescription" : {
            "text" : "Two otherwise unrelated classes that share too much information about each other are difficult to maintain, change and understand."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "modularity" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Inappropriate Intimacy",
            "description" : "Two otherwise unrelated classes that share too much information about each other are\n              difficult to maintain, change and understand.",
            "id" : "java/coupled-types",
            "query-path" : "/semmlecode-queries/Architecture/Refactoring Opportunities/InappropriateIntimacy.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/mutually-dependent-types",
          "name" : "java/mutually-dependent-types",
          "shortDescription" : {
            "text" : "Mutually-dependent types"
          },
          "fullDescription" : {
            "text" : "Mutual dependency between types makes code difficult to understand and test."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "modularity" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Mutually-dependent types",
            "description" : "Mutual dependency between types makes code difficult to understand and test.",
            "id" : "java/mutually-dependent-types",
            "query-path" : "/semmlecode-queries/Architecture/Dependencies/MutualDependency.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/duplicate-anonymous-class",
          "name" : "java/duplicate-anonymous-class",
          "shortDescription" : {
            "text" : "Duplicate anonymous class"
          },
          "fullDescription" : {
            "text" : "Duplicated anonymous classes indicate that refactoring is necessary."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "useless-code", "duplicate-code", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Duplicate anonymous class",
            "description" : "Duplicated anonymous classes indicate that refactoring is necessary.",
            "id" : "java/duplicate-anonymous-class",
            "query-path" : "/semmlecode-queries/external/DuplicateAnonymous.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/duplicate-method",
          "name" : "java/duplicate-method",
          "shortDescription" : {
            "text" : "Duplicate method"
          },
          "fullDescription" : {
            "text" : "Duplicated methods make code more difficult to understand and introduce a risk of changes being made to only one copy."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "useless-code", "duplicate-code", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Duplicate method",
            "description" : "Duplicated methods make code more difficult to understand and introduce a risk of\n              changes being made to only one copy.",
            "id" : "java/duplicate-method",
            "query-path" : "/semmlecode-queries/external/DuplicateMethod.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/duplicate-class",
          "name" : "java/duplicate-class",
          "shortDescription" : {
            "text" : "Mostly duplicate class"
          },
          "fullDescription" : {
            "text" : "Classes in which most of the methods are duplicated in another class make code more difficult to understand and introduce a risk of changes being made to only one copy."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "useless-code", "duplicate-code", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Mostly duplicate class",
            "description" : "Classes in which most of the methods are duplicated in another class make code more\n              difficult to understand and introduce a risk of changes being made to only one copy.",
            "id" : "java/duplicate-class",
            "query-path" : "/semmlecode-queries/external/MostlyDuplicateClass.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/duplicate-file",
          "name" : "java/duplicate-file",
          "shortDescription" : {
            "text" : "Mostly duplicate file"
          },
          "fullDescription" : {
            "text" : "Files in which most of the lines are duplicated in another file make code more difficult to understand and introduce a risk of changes being made to only one copy."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "useless-code", "duplicate-code", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Mostly duplicate file",
            "description" : "Files in which most of the lines are duplicated in another file make code more\n              difficult to understand and introduce a risk of changes being made to only one copy.",
            "id" : "java/duplicate-file",
            "query-path" : "/semmlecode-queries/external/MostlyDuplicateFile.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/similar-method",
          "name" : "java/similar-method",
          "shortDescription" : {
            "text" : "Mostly duplicate method"
          },
          "fullDescription" : {
            "text" : "Methods in which most of the lines are duplicated in another method make code more difficult to understand and introduce a risk of changes being made to only one copy."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "useless-code", "duplicate-code", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Mostly duplicate method",
            "description" : "Methods in which most of the lines are duplicated in another method make code more\n              difficult to understand and introduce a risk of changes being made to only one copy.",
            "id" : "java/similar-method",
            "query-path" : "/semmlecode-queries/external/MostlyDuplicateMethod.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/similar-file",
          "name" : "java/similar-file",
          "shortDescription" : {
            "text" : "Mostly similar file"
          },
          "fullDescription" : {
            "text" : "Files in which most of the lines are similar to those in another file make code more difficult to understand and introduce a risk of changes being made to only one copy."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "useless-code", "duplicate-code", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Mostly similar file",
            "description" : "Files in which most of the lines are similar to those in another file make code more\n              difficult to understand and introduce a risk of changes being made to only one copy.",
            "id" : "java/similar-file",
            "query-path" : "/semmlecode-queries/external/MostlySimilarFile.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/constants-only-interface",
          "name" : "java/constants-only-interface",
          "shortDescription" : {
            "text" : "Constant interface anti-pattern"
          },
          "fullDescription" : {
            "text" : "Implementing an interface (or extending an abstract class) only to put a number of constant definitions into scope is considered bad practice."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "modularity" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Constant interface anti-pattern",
            "description" : "Implementing an interface (or extending an abstract class)\n              only to put a number of constant definitions into scope is considered bad practice.",
            "id" : "java/constants-only-interface",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Declarations/NoConstantsOnly.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/abstract-to-concrete-cast",
          "name" : "java/abstract-to-concrete-cast",
          "shortDescription" : {
            "text" : "Cast from abstract to concrete collection"
          },
          "fullDescription" : {
            "text" : "A cast from an abstract collection to a concrete implementation type makes the code brittle."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "modularity", "external/cwe/cwe-485" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Cast from abstract to concrete collection",
            "description" : "A cast from an abstract collection to a concrete implementation type makes the\n              code brittle.",
            "id" : "java/abstract-to-concrete-cast",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Implementation Hiding/AbstractToConcreteCollection.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/internal-representation-exposure",
          "name" : "java/internal-representation-exposure",
          "shortDescription" : {
            "text" : "Exposing internal representation"
          },
          "fullDescription" : {
            "text" : "An object that accidentally exposes its internal representation may allow the object's fields to be modified in ways that the object is not prepared to handle."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "modularity", "external/cwe/cwe-485" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Exposing internal representation",
            "description" : "An object that accidentally exposes its internal representation may allow the\n              object's fields to be modified in ways that the object is not prepared to handle.",
            "id" : "java/internal-representation-exposure",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Implementation Hiding/ExposeRepresentation.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/static-array",
          "name" : "java/static-array",
          "shortDescription" : {
            "text" : "Array constant vulnerable to change"
          },
          "fullDescription" : {
            "text" : "Array constants are mutable and can be changed by malicious code or by accident."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "modularity", "external/cwe/cwe-582" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Array constant vulnerable to change",
            "description" : "Array constants are mutable and can be changed by malicious code or by accident.",
            "id" : "java/static-array",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Implementation Hiding/StaticArray.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/static-field-written-by-instance",
          "name" : "java/static-field-written-by-instance",
          "shortDescription" : {
            "text" : "Static field written by instance method"
          },
          "fullDescription" : {
            "text" : "Writing to a static field from an instance method is prone to race conditions unless you use synchronization. In addition, it makes it difficult to keep the static state consistent and affects code readability."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Static field written by instance method",
            "description" : "Writing to a static field from an instance method is prone to race conditions\n              unless you use synchronization. In addition, it makes it difficult to keep the\n              static state consistent and affects code readability.",
            "id" : "java/static-field-written-by-instance",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/StaticFieldWrittenByInstance.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unsafe-get-resource",
          "name" : "java/unsafe-get-resource",
          "shortDescription" : {
            "text" : "Unsafe use of getResource"
          },
          "fullDescription" : {
            "text" : "Calling 'this.getClass().getResource()' may yield unexpected results if called from a subclass in another package."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Unsafe use of getResource",
            "description" : "Calling 'this.getClass().getResource()' may yield unexpected results if called from a\n              subclass in another package.",
            "id" : "java/unsafe-get-resource",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Implementation Hiding/GetClassGetResource.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/jvm-exit",
          "name" : "java/jvm-exit",
          "shortDescription" : {
            "text" : "Forcible JVM termination"
          },
          "fullDescription" : {
            "text" : "Calling 'System.exit', 'Runtime.halt', or 'Runtime.exit' may make code harder to reuse and prevent important cleanup steps from running."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-382" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Forcible JVM termination",
            "description" : "Calling 'System.exit', 'Runtime.halt', or 'Runtime.exit' may make code harder to\n              reuse and prevent important cleanup steps from running.",
            "id" : "java/jvm-exit",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Undesirable Calls/CallsToSystemExit.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/string-concatenation-in-loop",
          "name" : "java/string-concatenation-in-loop",
          "shortDescription" : {
            "text" : "String concatenation in loop"
          },
          "fullDescription" : {
            "text" : "Performing string concatenation in a loop that iterates many times may affect performance."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "String concatenation in loop",
            "description" : "Performing string concatenation in a loop that iterates many times may affect\n              performance.",
            "id" : "java/string-concatenation-in-loop",
            "query-path" : "/semmlecode-queries/Performance/ConcatenationInLoops.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/inefficient-empty-string-test",
          "name" : "java/inefficient-empty-string-test",
          "shortDescription" : {
            "text" : "Inefficient empty string test"
          },
          "fullDescription" : {
            "text" : "Checking a string for equality with an empty string is inefficient."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Inefficient empty string test",
            "description" : "Checking a string for equality with an empty string is inefficient.",
            "id" : "java/inefficient-empty-string-test",
            "query-path" : "/semmlecode-queries/Performance/InefficientEmptyStringTest.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/inefficient-key-set-iterator",
          "name" : "java/inefficient-key-set-iterator",
          "shortDescription" : {
            "text" : "Inefficient use of key set iterator"
          },
          "fullDescription" : {
            "text" : "Iterating through the values of a map using the key set is inefficient."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Inefficient use of key set iterator",
            "description" : "Iterating through the values of a map using the key set is inefficient.",
            "id" : "java/inefficient-key-set-iterator",
            "query-path" : "/semmlecode-queries/Performance/InefficientKeySetIterator.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/inefficient-boxed-constructor",
          "name" : "java/inefficient-boxed-constructor",
          "shortDescription" : {
            "text" : "Inefficient primitive constructor"
          },
          "fullDescription" : {
            "text" : "Calling the constructor of a boxed type is inefficient."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Inefficient primitive constructor",
            "description" : "Calling the constructor of a boxed type is inefficient.",
            "id" : "java/inefficient-boxed-constructor",
            "query-path" : "/semmlecode-queries/Performance/InefficientPrimConstructor.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/inefficient-output-stream",
          "name" : "java/inefficient-output-stream",
          "shortDescription" : {
            "text" : "Inefficient output stream"
          },
          "fullDescription" : {
            "text" : "Using the default implementation of 'write(byte[],int,int)' provided by 'java.io.OutputStream' is very inefficient."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Inefficient output stream",
            "description" : "Using the default implementation of 'write(byte[],int,int)'\n              provided by 'java.io.OutputStream' is very inefficient.",
            "id" : "java/inefficient-output-stream",
            "query-path" : "/semmlecode-queries/Performance/InefficientOutputStream.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-static-nested-class",
          "name" : "java/non-static-nested-class",
          "shortDescription" : {
            "text" : "Inner class could be static"
          },
          "fullDescription" : {
            "text" : "A non-static nested class keeps a reference to the enclosing object, which makes the nested class bigger and may cause a memory leak."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Inner class could be static",
            "description" : "A non-static nested class keeps a reference to the enclosing object,\n              which makes the nested class bigger and may cause a memory leak.",
            "id" : "java/non-static-nested-class",
            "query-path" : "/semmlecode-queries/Performance/InnerClassCouldBeStatic.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/inefficient-string-constructor",
          "name" : "java/inefficient-string-constructor",
          "shortDescription" : {
            "text" : "Inefficient String constructor"
          },
          "fullDescription" : {
            "text" : "Using the 'String(String)' constructor is less memory efficient than using the constructor argument directly."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Inefficient String constructor",
            "description" : "Using the 'String(String)' constructor is less memory efficient than using the\n              constructor argument directly.",
            "id" : "java/inefficient-string-constructor",
            "query-path" : "/semmlecode-queries/Performance/NewStringString.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/chained-type-tests",
          "name" : "java/chained-type-tests",
          "shortDescription" : {
            "text" : "Chain of 'instanceof' tests"
          },
          "fullDescription" : {
            "text" : "Long sequences of type tests on a variable are difficult to maintain."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Chain of 'instanceof' tests",
            "description" : "Long sequences of type tests on a variable are difficult to maintain.",
            "id" : "java/chained-type-tests",
            "query-path" : "/semmlecode-queries/Language Abuse/ChainedInstanceof.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/downcast-of-this",
          "name" : "java/downcast-of-this",
          "shortDescription" : {
            "text" : "Dubious downcast of 'this'"
          },
          "fullDescription" : {
            "text" : "Casting 'this' to a derived type introduces a dependency cycle between the type of 'this' and the target type."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Dubious downcast of 'this'",
            "description" : "Casting 'this' to a derived type introduces a dependency cycle\n              between the type of 'this' and the target type.",
            "id" : "java/downcast-of-this",
            "query-path" : "/semmlecode-queries/Language Abuse/DubiousDowncastOfThis.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/type-test-of-this",
          "name" : "java/type-test-of-this",
          "shortDescription" : {
            "text" : "Dubious type test of 'this'"
          },
          "fullDescription" : {
            "text" : "Testing whether 'this' is an instance of a derived type introduces a dependency cycle between the type of 'this' and the target type."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "maintainability", "language-features" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Dubious type test of 'this'",
            "description" : "Testing whether 'this' is an instance of a derived type introduces\n              a dependency cycle between the type of 'this' and the target type.",
            "id" : "java/type-test-of-this",
            "query-path" : "/semmlecode-queries/Language Abuse/DubiousTypeTestOfThis.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/useless-type-test",
          "name" : "java/useless-type-test",
          "shortDescription" : {
            "text" : "Useless type test"
          },
          "fullDescription" : {
            "text" : "Testing whether a derived type is an instance of its base type is unnecessary."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "language-features", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Useless type test",
            "description" : "Testing whether a derived type is an instance of its base type is unnecessary.",
            "id" : "java/useless-type-test",
            "query-path" : "/semmlecode-queries/Language Abuse/UselessTypeTest.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/useless-upcast",
          "name" : "java/useless-upcast",
          "shortDescription" : {
            "text" : "Useless upcast"
          },
          "fullDescription" : {
            "text" : "Upcasting a derived type to its base type is usually unnecessary."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "language-features", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Useless upcast",
            "description" : "Upcasting a derived type to its base type is usually unnecessary.",
            "id" : "java/useless-upcast",
            "query-path" : "/semmlecode-queries/Language Abuse/UselessUpcast.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/useless-null-check",
          "name" : "java/useless-null-check",
          "shortDescription" : {
            "text" : "Useless null check"
          },
          "fullDescription" : {
            "text" : "Checking whether an expression is null when that expression cannot possibly be null is useless."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Useless null check",
            "description" : "Checking whether an expression is null when that expression cannot\n              possibly be null is useless.",
            "id" : "java/useless-null-check",
            "query-path" : "/semmlecode-queries/Language Abuse/UselessNullCheck.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/iterator-implements-iterable",
          "name" : "java/iterator-implements-iterable",
          "shortDescription" : {
            "text" : "Iterator implementing Iterable"
          },
          "fullDescription" : {
            "text" : "An 'Iterator' that also implements 'Iterable' by returning itself as its 'Iterator' does not support multiple traversals. This can lead to unexpected behavior when it is viewed as an 'Iterable'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "correctness", "reliability" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Iterator implementing Iterable",
            "description" : "An 'Iterator' that also implements 'Iterable' by returning itself as its 'Iterator'\n              does not support multiple traversals. This can lead to unexpected behavior when\n              it is viewed as an 'Iterable'.",
            "id" : "java/iterator-implements-iterable",
            "query-path" : "/semmlecode-queries/Language Abuse/IterableIterator.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/iterable-wraps-iterator",
          "name" : "java/iterable-wraps-iterator",
          "shortDescription" : {
            "text" : "Iterable wrapping an iterator"
          },
          "fullDescription" : {
            "text" : "An 'Iterable' that reuses an 'Iterator' instance does not support multiple traversals and can lead to unexpected behavior."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "correctness", "reliability" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Iterable wrapping an iterator",
            "description" : "An 'Iterable' that reuses an 'Iterator' instance does not support multiple traversals\n              and can lead to unexpected behavior.",
            "id" : "java/iterable-wraps-iterator",
            "query-path" : "/semmlecode-queries/Language Abuse/WrappedIterator.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/complex-block",
          "name" : "java/complex-block",
          "shortDescription" : {
            "text" : "Block with too many statements"
          },
          "fullDescription" : {
            "text" : "A block that contains too many complex statements becomes unreadable and unmaintainable."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "testability", "complexity" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Block with too many statements",
            "description" : "A block that contains too many complex statements becomes unreadable and\n              unmaintainable.",
            "id" : "java/complex-block",
            "query-path" : "/semmlecode-queries/Complexity/BlockWithTooManyStatements.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/unused-reference-type",
          "name" : "java/unused-reference-type",
          "shortDescription" : {
            "text" : "Unused classes and interfaces"
          },
          "fullDescription" : {
            "text" : "A non-public class or interface that is not used anywhere in the program wastes programmer resources."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Unused classes and interfaces",
            "description" : "A non-public class or interface that is not used anywhere in the program wastes\n              programmer resources.",
            "id" : "java/unused-reference-type",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/DeadRefTypes.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/overwritten-assignment-to-local",
          "name" : "java/overwritten-assignment-to-local",
          "shortDescription" : {
            "text" : "Assigned value is overwritten"
          },
          "fullDescription" : {
            "text" : "An assignment to a local variable that is not used before a further assignment is made has no effect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "readability", "external/cwe/cwe-563" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Assigned value is overwritten",
            "description" : "An assignment to a local variable that is not used before a further assignment is\n              made has no effect.",
            "id" : "java/overwritten-assignment-to-local",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/DeadStoreOfLocal.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unassigned-field",
          "name" : "java/unassigned-field",
          "shortDescription" : {
            "text" : "Field is never assigned a non-null value"
          },
          "fullDescription" : {
            "text" : "A field that is never assigned a value (except possibly 'null') just returns the default value when it is read."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "useless-code", "external/cwe/cwe-457" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Field is never assigned a non-null value",
            "description" : "A field that is never assigned a value (except possibly 'null') just returns the\n              default value when it is read.",
            "id" : "java/unassigned-field",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/NonAssignedFields.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unused-field",
          "name" : "java/unused-field",
          "shortDescription" : {
            "text" : "Unused field"
          },
          "fullDescription" : {
            "text" : "A field that is never used is probably unnecessary."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Unused field",
            "description" : "A field that is never used is probably unnecessary.",
            "id" : "java/unused-field",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/UnusedField.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/empty-statement",
          "name" : "java/empty-statement",
          "shortDescription" : {
            "text" : "Empty statement"
          },
          "fullDescription" : {
            "text" : "An empty statement hinders readability."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Empty statement",
            "description" : "An empty statement hinders readability.",
            "id" : "java/empty-statement",
            "query-path" : "/semmlecode-queries/Language Abuse/EmptyStatement.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/unimplementable-interface",
          "name" : "java/unimplementable-interface",
          "shortDescription" : {
            "text" : "Interface cannot be implemented"
          },
          "fullDescription" : {
            "text" : "An interface method that is incompatible with a protected method on 'java.lang.Object' means that the interface cannot be implemented."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Interface cannot be implemented",
            "description" : "An interface method that is incompatible with a protected method on\n              'java.lang.Object' means that the interface cannot be implemented.",
            "id" : "java/unimplementable-interface",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/InterfaceCannotBeImplemented.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/local-variable-is-never-read",
          "name" : "java/local-variable-is-never-read",
          "shortDescription" : {
            "text" : "Unread local variable"
          },
          "fullDescription" : {
            "text" : "A local variable that is never read is redundant."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Unread local variable",
            "description" : "A local variable that is never read is redundant.",
            "id" : "java/local-variable-is-never-read",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/UnreadLocal.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/unused-label",
          "name" : "java/unused-label",
          "shortDescription" : {
            "text" : "Unused label"
          },
          "fullDescription" : {
            "text" : "An unused label for a loop or 'switch' statement is either redundant or indicates incorrect 'break' or 'continue' statements."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Unused label",
            "description" : "An unused label for a loop or 'switch' statement is either redundant or indicates\n              incorrect 'break' or 'continue' statements.",
            "id" : "java/unused-label",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/UnusedLabel.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/empty-container",
          "name" : "java/empty-container",
          "shortDescription" : {
            "text" : "Container contents are never initialized"
          },
          "fullDescription" : {
            "text" : "Querying the contents of a collection or map that is never initialized is not normally useful."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Container contents are never initialized",
            "description" : "Querying the contents of a collection or map that is never initialized is not normally useful.",
            "id" : "java/empty-container",
            "query-path" : "/semmlecode-queries/Likely Bugs/Collections/ReadOnlyContainer.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/unused-container",
          "name" : "java/unused-container",
          "shortDescription" : {
            "text" : "Container contents are never accessed"
          },
          "fullDescription" : {
            "text" : "A collection or map whose contents are never queried or accessed is useless."
          },
          "defaultConfiguration" : {
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Container contents are never accessed",
            "description" : "A collection or map whose contents are never queried or accessed is useless.",
            "id" : "java/unused-container",
            "query-path" : "/semmlecode-queries/Likely Bugs/Collections/WriteOnlyContainer.ql",
            "problem.severity" : "error"
          }
        }, {
          "id" : "java/evaluation-to-constant",
          "name" : "java/evaluation-to-constant",
          "shortDescription" : {
            "text" : "Expression always evaluates to the same value"
          },
          "fullDescription" : {
            "text" : "An expression that always evaluates to the same value, but which has a non-constant subexpression, indicates a mistake."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Expression always evaluates to the same value",
            "description" : "An expression that always evaluates to the same value, but which has a non-constant subexpression, indicates a mistake.",
            "id" : "java/evaluation-to-constant",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/ConstantExpAppearsNonConstant.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/unused-format-argument",
          "name" : "java/unused-format-argument",
          "shortDescription" : {
            "text" : "Unused format argument"
          },
          "fullDescription" : {
            "text" : "A format call with a format string that refers to fewer arguments than the number of supplied arguments will silently ignore the additional arguments."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-685" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Unused format argument",
            "description" : "A format call with a format string that refers to fewer\n              arguments than the number of supplied arguments will silently\n              ignore the additional arguments.",
            "id" : "java/unused-format-argument",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/UnusedFormatArg.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/switch-fall-through",
          "name" : "java/switch-fall-through",
          "shortDescription" : {
            "text" : "Unterminated switch case"
          },
          "fullDescription" : {
            "text" : "A 'case' statement that does not contain a 'break' statement allows execution to 'fall through' to the next 'case', which may not be intended."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability", "external/cwe/cwe-484" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Unterminated switch case",
            "description" : "A 'case' statement that does not contain a 'break' statement allows execution to\n              'fall through' to the next 'case', which may not be intended.",
            "id" : "java/switch-fall-through",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Declarations/BreakInSwitchCase.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/subtle-inherited-call",
          "name" : "java/subtle-inherited-call",
          "shortDescription" : {
            "text" : "Subtle call to inherited method"
          },
          "fullDescription" : {
            "text" : "An unqualified call to a method that exists with the same signature in both a superclass and an outer class is ambiguous."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Subtle call to inherited method",
            "description" : "An unqualified call to a method that exists with the same signature in both a\n              superclass and an outer class is ambiguous.",
            "id" : "java/subtle-inherited-call",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/AmbiguousOuterSuper.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/field-masks-super-field",
          "name" : "java/field-masks-super-field",
          "shortDescription" : {
            "text" : "Field masks field in super class"
          },
          "fullDescription" : {
            "text" : "Hiding a field in a superclass by redeclaring it in a subclass might be unintentional, especially if references to the hidden field are not qualified using 'super'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Field masks field in super class",
            "description" : "Hiding a field in a superclass by redeclaring it in a subclass might be\n              unintentional, especially if references to the hidden field are not qualified using\n              'super'.",
            "id" : "java/field-masks-super-field",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/FieldMasksSuperField.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/local-shadows-field",
          "name" : "java/local-shadows-field",
          "shortDescription" : {
            "text" : "Possible confusion of local and field"
          },
          "fullDescription" : {
            "text" : "A method in which a variable is declared with the same name as a field is difficult to understand."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Possible confusion of local and field",
            "description" : "A method in which a variable is declared with the same name as a field is difficult\n              to understand.",
            "id" : "java/local-shadows-field",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/LocalShadowsFieldConfusing.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/non-overriding-package-private",
          "name" : "java/non-overriding-package-private",
          "shortDescription" : {
            "text" : "Confusing non-overriding of package-private method"
          },
          "fullDescription" : {
            "text" : "A method that appears to override another method but does not, because the declaring classes are in different packages, is potentially confusing."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Confusing non-overriding of package-private method",
            "description" : "A method that appears to override another method but does not, because the\n              declaring classes are in different packages, is potentially confusing.",
            "id" : "java/non-overriding-package-private",
            "query-path" : "/semmlecode-queries/Language Abuse/OverridePackagePrivate.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/complex-condition",
          "name" : "java/complex-condition",
          "shortDescription" : {
            "text" : "Complex condition"
          },
          "fullDescription" : {
            "text" : "Very complex conditions are difficult to read and may include defects."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "readability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Complex condition",
            "description" : "Very complex conditions are difficult to read and may include defects.",
            "id" : "java/complex-condition",
            "query-path" : "/semmlecode-queries/Complexity/ComplexCondition.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/assignment-in-boolean-expression",
          "name" : "java/assignment-in-boolean-expression",
          "shortDescription" : {
            "text" : "Assignment in Boolean expression"
          },
          "fullDescription" : {
            "text" : "Assignments in Boolean conditions can be confused with equality tests and make the condition more difficult to understand."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability", "external/cwe/cwe-481" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Assignment in Boolean expression",
            "description" : "Assignments in Boolean conditions can be confused with equality tests and make the\n              condition more difficult to understand.",
            "id" : "java/assignment-in-boolean-expression",
            "query-path" : "/semmlecode-queries/Likely Bugs/Comparison/NoAssignInBooleanExprs.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-short-circuit-evaluation",
          "name" : "java/non-short-circuit-evaluation",
          "shortDescription" : {
            "text" : "Dangerous non-short-circuit logic"
          },
          "fullDescription" : {
            "text" : "Using a bitwise logical operator on a boolean where a conditional-and or conditional-or operator is intended may yield the wrong result or cause an exception."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability", "external/cwe/cwe-691" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Dangerous non-short-circuit logic",
            "description" : "Using a bitwise logical operator on a boolean where a conditional-and or\n              conditional-or operator is intended may yield the wrong result or\n              cause an exception.",
            "id" : "java/non-short-circuit-evaluation",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/DangerousNonCircuitLogic.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/assignment-in-return",
          "name" : "java/assignment-in-return",
          "shortDescription" : {
            "text" : "Assignment in return statement"
          },
          "fullDescription" : {
            "text" : "Assigning to a local variable in a 'return' statement has no effect."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Assignment in return statement",
            "description" : "Assigning to a local variable in a 'return' statement has no effect.",
            "id" : "java/assignment-in-return",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/AssignmentInReturn.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/whitespace-contradicts-precedence",
          "name" : "java/whitespace-contradicts-precedence",
          "shortDescription" : {
            "text" : "Whitespace contradicts operator precedence"
          },
          "fullDescription" : {
            "text" : "Nested expressions where the formatting contradicts the grouping enforced by operator precedence are difficult to read and may even indicate a bug."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "external/cwe/cwe-783" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Whitespace contradicts operator precedence",
            "description" : "Nested expressions where the formatting contradicts the grouping enforced by operator precedence\n              are difficult to read and may even indicate a bug.",
            "id" : "java/whitespace-contradicts-precedence",
            "query-path" : "/semmlecode-queries/Likely Bugs/Arithmetic/WhitespaceContradictsPrecedence.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/complex-boolean-expression",
          "name" : "java/complex-boolean-expression",
          "shortDescription" : {
            "text" : "Unnecessarily complex boolean expression"
          },
          "fullDescription" : {
            "text" : "Boolean expressions that are unnecessarily complicated hinder readability."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "readability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Unnecessarily complex boolean expression",
            "description" : "Boolean expressions that are unnecessarily complicated hinder readability.",
            "id" : "java/complex-boolean-expression",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Boolean Logic/SimplifyBoolExpr.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/missing-space-in-concatenation",
          "name" : "java/missing-space-in-concatenation",
          "shortDescription" : {
            "text" : "Missing space in string literal"
          },
          "fullDescription" : {
            "text" : "Joining strings at compile-time to construct a string literal so that two words are concatenated without a separating space usually indicates a text error."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "readability" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Missing space in string literal",
            "description" : "Joining strings at compile-time to construct a string literal\n              so that two words are concatenated without a separating space\n              usually indicates a text error.",
            "id" : "java/missing-space-in-concatenation",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/MissingSpaceTypo.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/empty-block",
          "name" : "java/empty-block",
          "shortDescription" : {
            "text" : "Empty branch of conditional, or empty loop body"
          },
          "fullDescription" : {
            "text" : "An undocumented empty block or statement hinders readability. It may also indicate incomplete code."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Empty branch of conditional, or empty loop body",
            "description" : "An undocumented empty block or statement hinders readability. It may also\n              indicate incomplete code.",
            "id" : "java/empty-block",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/EmptyBlock.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/todo-comment",
          "name" : "java/todo-comment",
          "shortDescription" : {
            "text" : "TODO/FIXME comments"
          },
          "fullDescription" : {
            "text" : "A comment that contains 'TODO' or 'FIXME' may indicate code that is incomplete or broken, or it may highlight an ambiguity in the software's specification."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "external/cwe/cwe-546" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "TODO/FIXME comments",
            "description" : "A comment that contains 'TODO' or 'FIXME' may indicate code that is incomplete or\n              broken, or it may highlight an ambiguity in the software's specification.",
            "id" : "java/todo-comment",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Comments/TodoComments.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/commented-out-code",
          "name" : "java/commented-out-code",
          "shortDescription" : {
            "text" : "Commented-out code"
          },
          "fullDescription" : {
            "text" : "Commented-out code makes the remaining code more difficult to read."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Commented-out code",
            "description" : "Commented-out code makes the remaining code more difficult to read.",
            "id" : "java/commented-out-code",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Comments/CommentedCode.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/empty-zip-file-entry",
          "name" : "java/empty-zip-file-entry",
          "shortDescription" : {
            "text" : "Creates empty ZIP file entry"
          },
          "fullDescription" : {
            "text" : "Omitting a call to 'ZipOutputStream.write' when writing a ZIP file to an output stream means that an empty ZIP file entry is written."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Creates empty ZIP file entry",
            "description" : "Omitting a call to 'ZipOutputStream.write' when writing a ZIP file to an output\n              stream means that an empty ZIP file entry is written.",
            "id" : "java/empty-zip-file-entry",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/CreatesEmptyZip.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/empty-finalizer",
          "name" : "java/empty-finalizer",
          "shortDescription" : {
            "text" : "Empty body of finalizer"
          },
          "fullDescription" : {
            "text" : "An empty 'finalize' method is useless and prevents its superclass's 'finalize' method (if any) from being called."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability", "external/cwe/cwe-568" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Empty body of finalizer",
            "description" : "An empty 'finalize' method is useless and prevents its superclass's 'finalize'\n              method (if any) from being called.",
            "id" : "java/empty-finalizer",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Dead Code/EmptyFinalize.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/missing-case-in-switch",
          "name" : "java/missing-case-in-switch",
          "shortDescription" : {
            "text" : "Missing enum case in switch"
          },
          "fullDescription" : {
            "text" : "A 'switch' statement that is based on an 'enum' type and does not have cases for all the 'enum' constants is usually a coding mistake."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability", "external/cwe/cwe-478" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Missing enum case in switch",
            "description" : "A 'switch' statement that is based on an 'enum' type and does not have cases for all\n              the 'enum' constants is usually a coding mistake.",
            "id" : "java/missing-case-in-switch",
            "query-path" : "/semmlecode-queries/Likely Bugs/Statements/MissingEnumInSwitch.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/magic-number",
          "name" : "java/magic-number",
          "shortDescription" : {
            "text" : "Magic numbers"
          },
          "fullDescription" : {
            "text" : "A magic number makes code less readable and maintainable."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Magic numbers",
            "description" : "A magic number makes code less readable and maintainable.",
            "id" : "java/magic-number",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Magic Constants/MagicConstantsNumbers.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/magic-string",
          "name" : "java/magic-string",
          "shortDescription" : {
            "text" : "Magic strings"
          },
          "fullDescription" : {
            "text" : "A magic string makes code less readable and maintainable."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "statistical", "non-attributable" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Magic strings",
            "description" : "A magic string makes code less readable and maintainable.",
            "id" : "java/magic-string",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Magic Constants/MagicConstantsString.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/use-number-constant",
          "name" : "java/use-number-constant",
          "shortDescription" : {
            "text" : "Magic numbers: use defined constant"
          },
          "fullDescription" : {
            "text" : "A magic number, which is used instead of an existing named constant, makes code less readable and maintainable."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Magic numbers: use defined constant",
            "description" : "A magic number, which is used instead of an existing named constant, makes code less\n              readable and maintainable.",
            "id" : "java/use-number-constant",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Magic Constants/MagicNumbersUseConstant.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/use-string-constant",
          "name" : "java/use-string-constant",
          "shortDescription" : {
            "text" : "Magic strings: use defined constant"
          },
          "fullDescription" : {
            "text" : "A magic string, which is used instead of an existing named constant, makes code less readable and maintainable."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Magic strings: use defined constant",
            "description" : "A magic string, which is used instead of an existing named constant, makes code less\n              readable and maintainable.",
            "id" : "java/use-string-constant",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Magic Constants/MagicStringsUseConstant.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/constructor-typo",
          "name" : "java/constructor-typo",
          "shortDescription" : {
            "text" : "Typo in constructor"
          },
          "fullDescription" : {
            "text" : "A method that has the same name as its declaring type may have been intended to be a constructor."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Typo in constructor",
            "description" : "A method that has the same name as its declaring type may have been intended to be\n              a constructor.",
            "id" : "java/constructor-typo",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/ConstructorTypo.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/equals-typo",
          "name" : "java/equals-typo",
          "shortDescription" : {
            "text" : "Typo in equals"
          },
          "fullDescription" : {
            "text" : "A method named 'equal' may be intended to be named 'equals'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Typo in equals",
            "description" : "A method named 'equal' may be intended to be named 'equals'.",
            "id" : "java/equals-typo",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/EqualsTypo.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/hashcode-typo",
          "name" : "java/hashcode-typo",
          "shortDescription" : {
            "text" : "Typo in hashCode"
          },
          "fullDescription" : {
            "text" : "A method named 'hashcode' may be intended to be named 'hashCode'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Typo in hashCode",
            "description" : "A method named 'hashcode' may be intended to be named 'hashCode'.",
            "id" : "java/hashcode-typo",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/HashCodeTypo.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/tostring-typo",
          "name" : "java/tostring-typo",
          "shortDescription" : {
            "text" : "Typo in toString"
          },
          "fullDescription" : {
            "text" : "A method named 'tostring' may be intended to be named 'toString'."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Typo in toString",
            "description" : "A method named 'tostring' may be intended to be named 'toString'.",
            "id" : "java/tostring-typo",
            "query-path" : "/semmlecode-queries/Likely Bugs/Likely Typos/ToStringTypo.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/confusing-method-name",
          "name" : "java/confusing-method-name",
          "shortDescription" : {
            "text" : "Confusing method names because of capitalization"
          },
          "fullDescription" : {
            "text" : "Methods in the same class whose names differ only in capitalization are confusing."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Confusing method names because of capitalization",
            "description" : "Methods in the same class whose names differ only in capitalization are\n              confusing.",
            "id" : "java/confusing-method-name",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/ConfusingMethodNames.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/confusing-override-name",
          "name" : "java/confusing-override-name",
          "shortDescription" : {
            "text" : "Confusing method names because of overriding"
          },
          "fullDescription" : {
            "text" : "A method that would override another method but does not, because the name is capitalized differently, is confusing and may be a mistake."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "Confusing method names because of overriding",
            "description" : "A method that would override another method but does not, because the name is\n              capitalized differently, is confusing and may be a mistake.",
            "id" : "java/confusing-override-name",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/ConfusingOverridesNames.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/class-name-matches-super-class",
          "name" : "java/class-name-matches-super-class",
          "shortDescription" : {
            "text" : "Class has same name as super class"
          },
          "fullDescription" : {
            "text" : "A class that has the same name as its superclass may be confusing."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Class has same name as super class",
            "description" : "A class that has the same name as its superclass may be confusing.",
            "id" : "java/class-name-matches-super-class",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/SameNameAsSuper.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/enum-identifier",
          "name" : "java/enum-identifier",
          "shortDescription" : {
            "text" : "String 'enum' used as identifier"
          },
          "fullDescription" : {
            "text" : "Using 'enum' as an identifier makes the code incompatible with Java 5 and later."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "portability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "low",
            "name" : "String 'enum' used as identifier",
            "description" : "Using 'enum' as an identifier makes the code incompatible with Java 5 and later.",
            "id" : "java/enum-identifier",
            "query-path" : "/semmlecode-queries/Language Abuse/EnumIdentifier.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/confusing-method-signature",
          "name" : "java/confusing-method-signature",
          "shortDescription" : {
            "text" : "Confusing overloading of methods"
          },
          "fullDescription" : {
            "text" : "Overloaded methods that have the same number of parameters, where each pair of corresponding parameter types is convertible by casting or autoboxing, may be confusing."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "naming" ],
            "kind" : "problem",
            "precision" : "high",
            "name" : "Confusing overloading of methods",
            "description" : "Overloaded methods that have the same number of parameters, where each pair of\n              corresponding parameter types is convertible by casting or autoboxing, may be\n              confusing.",
            "id" : "java/confusing-method-signature",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Naming Conventions/ConfusingOverloading.ql",
            "problem.severity" : "recommendation"
          }
        }, {
          "id" : "java/type-bound-extends-final",
          "name" : "java/type-bound-extends-final",
          "shortDescription" : {
            "text" : "Type bound extends a final class"
          },
          "fullDescription" : {
            "text" : "If 'C' is a final class, a type bound such as '? extends C' is confusing because it implies that 'C' has subclasses, but a final class has no subclasses."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "readability", "types" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Type bound extends a final class",
            "description" : "If 'C' is a final class, a type bound such as '? extends C'\n              is confusing because it implies that 'C' has subclasses, but\n              a final class has no subclasses.",
            "id" : "java/type-bound-extends-final",
            "query-path" : "/semmlecode-queries/Language Abuse/TypeVarExtendsFinalType.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/type-variable-hides-type",
          "name" : "java/type-variable-hides-type",
          "shortDescription" : {
            "text" : "Type variable hides another type"
          },
          "fullDescription" : {
            "text" : "A type variable with the same name as another type that is in scope can cause the two types to be confused."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "reliability", "readability", "types" ],
            "kind" : "problem",
            "precision" : "medium",
            "name" : "Type variable hides another type",
            "description" : "A type variable with the same name as another type that is in scope can cause\n              the two types to be confused.",
            "id" : "java/type-variable-hides-type",
            "query-path" : "/semmlecode-queries/Language Abuse/TypeVariableHidesType.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/non-null-boxed-variable",
          "name" : "java/non-null-boxed-variable",
          "shortDescription" : {
            "text" : "Boxed variable is never null"
          },
          "fullDescription" : {
            "text" : "Using a boxed type for a variable that is never assigned 'null' hinders readability because it implies that 'null' is a potential value."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "readability", "types" ],
            "kind" : "problem",
            "precision" : "very-high",
            "name" : "Boxed variable is never null",
            "description" : "Using a boxed type for a variable that is never assigned 'null'\n              hinders readability because it implies that 'null' is a potential value.",
            "id" : "java/non-null-boxed-variable",
            "query-path" : "/semmlecode-queries/Violations of Best Practice/Boxed Types/BoxedVariable.ql",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "java/cyclomatic-complexity-per-function",
          "name" : "java/cyclomatic-complexity-per-function",
          "shortDescription" : {
            "text" : "Cyclomatic complexity of functions"
          },
          "fullDescription" : {
            "text" : "The number of possible execution paths through a method or constructor."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "complexity", "maintainability" ],
            "metricType" : "callable",
            "metricAggregate" : "avg max sum",
            "kind" : "treemap",
            "warning-from" : "40",
            "name" : "Cyclomatic complexity of functions",
            "description" : "The number of possible execution paths through a method or constructor.",
            "id" : "java/cyclomatic-complexity-per-function",
            "query-path" : "/odasa-java-metrics/Callables/CCyclomaticComplexity.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/response-per-type",
          "name" : "java/response-per-type",
          "shortDescription" : {
            "text" : "Class response"
          },
          "fullDescription" : {
            "text" : "The number of unique methods or constructors that can be called by all the methods or constructors of a class."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "complexity" ],
            "metricType" : "reftype",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "350",
            "name" : "Class response",
            "description" : "The number of unique methods or constructors that can be called by all the methods\n              or constructors of a class.",
            "id" : "java/response-per-type",
            "query-path" : "/odasa-java-metrics/RefTypes/TResponse.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/calls-per-function",
          "name" : "java/calls-per-function",
          "shortDescription" : {
            "text" : "Number of calls in methods"
          },
          "fullDescription" : {
            "text" : "The number of calls that is made by a method or constructor."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "complexity", "maintainability" ],
            "metricType" : "callable",
            "metricAggregate" : "avg sum max",
            "kind" : "treemap",
            "warning-from" : "100",
            "name" : "Number of calls in methods",
            "description" : "The number of calls that is made by a method or constructor.",
            "id" : "java/calls-per-function",
            "query-path" : "/odasa-java-metrics/Callables/CNumberOfCalls.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/outgoing-source-type-dependencies",
          "name" : "java/outgoing-source-type-dependencies",
          "shortDescription" : {
            "text" : "Outgoing dependencies to source types"
          },
          "fullDescription" : {
            "text" : "The number of source types on which a type depends."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "changeability", "maintainability", "modularity" ],
            "metricType" : "reftype",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "30",
            "name" : "Outgoing dependencies to source types",
            "description" : "The number of source types on which a type depends.",
            "id" : "java/outgoing-source-type-dependencies",
            "query-path" : "/odasa-java-metrics/RefTypes/TEfferentSourceCoupling.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/lack-of-cohesion-ck",
          "name" : "java/lack-of-cohesion-ck",
          "shortDescription" : {
            "text" : "Lack of type cohesion (CK)"
          },
          "fullDescription" : {
            "text" : "Lack of cohesion for a class as defined by Chidamber and Kemerer."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "modularity", "maintainability" ],
            "metricType" : "reftype",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "3000",
            "name" : "Lack of type cohesion (CK)",
            "description" : "Lack of cohesion for a class as defined by Chidamber and Kemerer.",
            "id" : "java/lack-of-cohesion-ck",
            "query-path" : "/odasa-java-metrics/RefTypes/TLackOfCohesionCK.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/type-specialization-index",
          "name" : "java/type-specialization-index",
          "shortDescription" : {
            "text" : "Type specialization index"
          },
          "fullDescription" : {
            "text" : "The extent to which a subclass overrides the behavior of its superclasses."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "modularity", "maintainability" ],
            "metricType" : "reftype",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "4",
            "name" : "Type specialization index",
            "description" : "The extent to which a subclass overrides the behavior of its superclasses.",
            "id" : "java/type-specialization-index",
            "query-path" : "/odasa-java-metrics/RefTypes/TSpecialisationIndex.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/fields-per-type",
          "name" : "java/fields-per-type",
          "shortDescription" : {
            "text" : "Number of fields"
          },
          "fullDescription" : {
            "text" : "The number of fields in a class, excluding enum constants."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "complexity" ],
            "metricType" : "reftype",
            "metricAggregate" : "avg sum max",
            "kind" : "treemap",
            "warning-from" : "26",
            "name" : "Number of fields",
            "description" : "The number of fields in a class, excluding enum constants.",
            "id" : "java/fields-per-type",
            "query-path" : "/odasa-java-metrics/RefTypes/TNumberOfFields.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/parameters-per-function",
          "name" : "java/parameters-per-function",
          "shortDescription" : {
            "text" : "Number of parameters to methods"
          },
          "fullDescription" : {
            "text" : "The number of parameters of a method or constructor."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "testability", "complexity", "maintainability" ],
            "metricType" : "callable",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "9",
            "name" : "Number of parameters to methods",
            "description" : "The number of parameters of a method or constructor.",
            "id" : "java/parameters-per-function",
            "query-path" : "/odasa-java-metrics/Callables/CNumberOfParameters.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/lines-of-code-in-files",
          "name" : "java/lines-of-code-in-files",
          "shortDescription" : {
            "text" : "Lines of code in files"
          },
          "fullDescription" : {
            "text" : "The number of lines of code in a file."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "complexity" ],
            "metricType" : "file",
            "metricAggregate" : "avg sum max",
            "kind" : "treemap",
            "warning-from" : "1000",
            "precision" : "very-high",
            "name" : "Lines of code in files",
            "description" : "The number of lines of code in a file.",
            "id" : "java/lines-of-code-in-files",
            "query-path" : "/odasa-java-metrics/Files/FLinesOfCode.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/lines-of-code-per-function",
          "name" : "java/lines-of-code-per-function",
          "shortDescription" : {
            "text" : "Lines of code in methods"
          },
          "fullDescription" : {
            "text" : "The number of lines of code in a method."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "complexity" ],
            "metricType" : "callable",
            "metricAggregate" : "avg sum max",
            "kind" : "treemap",
            "warning-from" : "300",
            "name" : "Lines of code in methods",
            "description" : "The number of lines of code in a method.",
            "id" : "java/lines-of-code-per-function",
            "query-path" : "/odasa-java-metrics/Callables/CLinesOfCode.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/statement-nesting-depth-per-function",
          "name" : "java/statement-nesting-depth-per-function",
          "shortDescription" : {
            "text" : "Statement nesting depth"
          },
          "fullDescription" : {
            "text" : "The maximum level of nesting of statements (for example 'if', 'for', 'while') in a method. Blocks are not counted."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability", "complexity" ],
            "metricType" : "callable",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "10",
            "name" : "Statement nesting depth",
            "description" : "The maximum level of nesting of statements (for example 'if', 'for', 'while') in a\n              method. Blocks are not counted.",
            "id" : "java/statement-nesting-depth-per-function",
            "query-path" : "/odasa-java-metrics/Callables/StatementNestingDepth.ql",
            "treemap.warnOn" : "highValues"
          }
        }, {
          "id" : "java/authors-per-file",
          "name" : "java/authors-per-file",
          "shortDescription" : {
            "text" : "Number of authors (Javadoc)"
          },
          "fullDescription" : {
            "text" : "The number of different authors (by Javadoc tag) of a file."
          },
          "defaultConfiguration" : { },
          "properties" : {
            "tags" : [ "maintainability" ],
            "metricType" : "file",
            "metricAggregate" : "avg max",
            "kind" : "treemap",
            "warning-from" : "4",
            "name" : "Number of authors (Javadoc)",
            "description" : "The number of different authors (by Javadoc tag) of a file.",
            "id" : "java/authors-per-file",
            "query-path" : "/odasa-java-metrics/Authors/AuthorsPerFile.ql",
            "treemap.warnOn" : "highValues"
          }
        } ]
      }
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCaseBadOnly.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCaseClassIssueBad.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCaseClassIssueGood.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCase.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCaseClassIssue.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "src/testcases/CWE835_Infinite_Loop/CWE835_Infinite_Loop__do_01.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "src/testcases/CWE835_Infinite_Loop/Main.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCaseServlet.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "src/testcasesupport/AbstractTestCaseServletBadOnly.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    } ],
    "results" : [ {
      "ruleId" : "java/duplicate-method",
      "ruleIndex" : 123,
      "message" : {
        "text" : "Method runTest is duplicated in [testcasesupport.AbstractTestCaseClassIssueBad](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseBadOnly.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 17,
            "endLine" : 12,
            "endColumn" : 24,
            "charOffset" : 286,
            "charLength" : 7
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e57bf8c3efb8ad4e:1",
        "primaryLocationStartColumnFingerprint" : "12"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssueBad.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 17,
            "endLine" : 14,
            "endColumn" : 24,
            "charOffset" : 409,
            "charLength" : 7
          }
        },
        "message" : {
          "text" : "testcasesupport.AbstractTestCaseClassIssueBad"
        }
      } ]
    }, {
      "ruleId" : "java/duplicate-method",
      "ruleIndex" : 123,
      "message" : {
        "text" : "Method runTest is duplicated in [testcasesupport.AbstractTestCaseBadOnly](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssueBad.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 17,
            "endLine" : 14,
            "endColumn" : 24,
            "charOffset" : 409,
            "charLength" : 7
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e57bf8c3efb8ad4e:1",
        "primaryLocationStartColumnFingerprint" : "12"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseBadOnly.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 17,
            "endLine" : 12,
            "endColumn" : 24,
            "charOffset" : 286,
            "charLength" : 7
          }
        },
        "message" : {
          "text" : "testcasesupport.AbstractTestCaseBadOnly"
        }
      } ]
    }, {
      "ruleId" : "java/duplicate-method",
      "ruleIndex" : 123,
      "message" : {
        "text" : "Method runTest is duplicated in [testcasesupport.AbstractTestCase](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssueGood.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 17,
            "endLine" : 14,
            "endColumn" : 24,
            "charOffset" : 407,
            "charLength" : 7
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e57bf8c727a47346:1",
        "primaryLocationStartColumnFingerprint" : "12"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCase.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 17,
            "endLine" : 16,
            "endColumn" : 24,
            "charOffset" : 403,
            "charLength" : 7
          }
        },
        "message" : {
          "text" : "testcasesupport.AbstractTestCase"
        }
      } ]
    }, {
      "ruleId" : "java/unassigned-field",
      "ruleIndex" : 153,
      "message" : {
        "text" : "Field good1Object never assigned non-null value, yet it is read at [AbstractTestCaseClassIssue.java:22](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssue.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 46,
            "endLine" : 14,
            "endColumn" : 57,
            "charOffset" : 481,
            "charLength" : 11
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8defe7c11ccabc55:1",
        "primaryLocationStartColumnFingerprint" : "41"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssue.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 13,
            "endLine" : 22,
            "endColumn" : 24,
            "charOffset" : 697,
            "charLength" : 11
          }
        },
        "message" : {
          "text" : "AbstractTestCaseClassIssue.java:22"
        }
      } ]
    }, {
      "ruleId" : "java/unassigned-field",
      "ruleIndex" : 153,
      "message" : {
        "text" : "Field badObject never assigned non-null value, yet it is read at [AbstractTestCaseClassIssue.java:44](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssue.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 45,
            "endLine" : 12,
            "endColumn" : 54,
            "charOffset" : 378,
            "charLength" : 9
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fc56fac4621318a3:1",
        "primaryLocationStartColumnFingerprint" : "40"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseClassIssue.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 13,
            "endLine" : 44,
            "endColumn" : 22,
            "charOffset" : 1417,
            "charLength" : 9
          }
        },
        "message" : {
          "text" : "AbstractTestCaseClassIssue.java:44"
        }
      } ]
    }, {
      "ruleId" : "java/local-variable-is-never-read",
      "ruleIndex" : 157,
      "message" : {
        "text" : "Variable 'int j' is never read."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcases/CWE835_Infinite_Loop/CWE835_Infinite_Loop__do_01.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 9,
            "endLine" : 16,
            "endColumn" : 21,
            "charOffset" : 269,
            "charLength" : 12
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c723bfd333a0aac:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "java/commented-out-code",
      "ruleIndex" : 177,
      "message" : {
        "text" : "This comment appears to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcases/CWE835_Infinite_Loop/Main.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 6,
            "endLine" : 33,
            "endColumn" : 67,
            "charOffset" : 1276,
            "charLength" : 61
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9cf71b34bd6e286:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "java/commented-out-code",
      "ruleIndex" : 177,
      "message" : {
        "text" : "This comment appears to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcases/CWE835_Infinite_Loop/Main.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 6,
            "endLine" : 35,
            "endColumn" : 75,
            "charOffset" : 1351,
            "charLength" : 69
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e65347eda118cd3b:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "java/commented-out-code",
      "ruleIndex" : 177,
      "message" : {
        "text" : "This comment appears to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseServlet.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 73,
            "endLine" : 42,
            "endColumn" : 117,
            "charOffset" : 1643,
            "charLength" : 44
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "941c6aaed85262d0:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "java/commented-out-code",
      "ruleIndex" : 177,
      "message" : {
        "text" : "This comment appears to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/testcasesupport/AbstractTestCaseServletBadOnly.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 73,
            "endLine" : 39,
            "endColumn" : 117,
            "charOffset" : 1510,
            "charLength" : 44
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "941c6aaed85262d0:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    } ],
    "columnKind" : "utf16CodeUnits",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0",
      "semmle.sourceLanguage" : "java"
    }
  } ]
}